
Schrittmotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00001db6  00001e4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001db6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000032c  0080015a  0080015a  00001ea4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001ea4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000290  00000000  00000000  00001f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003829  00000000  00000000  000021d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001715  00000000  00000000  000059f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000116f  00000000  00000000  0000710e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000844  00000000  00000000  00008280  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001295  00000000  00000000  00008ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000240d  00000000  00000000  00009d59  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  0000c166  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__ctors_end>
       4:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       8:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
       c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      10:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      14:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      18:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      1c:	0c 94 80 02 	jmp	0x500	; 0x500 <__vector_7>
      20:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      24:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      28:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      2c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      30:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      34:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      38:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      3c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      40:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      44:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      48:	0c 94 f5 09 	jmp	0x13ea	; 0x13ea <__vector_18>
      4c:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__vector_19>
      50:	0c 94 19 0a 	jmp	0x1432	; 0x1432 <__vector_20>
      54:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      58:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      5c:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      60:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>
      64:	0c 94 7b 00 	jmp	0xf6	; 0xf6 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	4e 41       	sbci	r20, 0x1E	; 30
      6a:	4e 49       	Address 0x0000006a is out of bounds.
.word	0xffff	; ????

0000006b <pstr_inity>:
      6b:	49 4e 49 54 59                                      INITY

00000070 <pstr_inf>:
      70:	49 4e 46                                            INF

00000073 <pwr_m10>:
      73:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      83:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

0000008b <pwr_p10>:
      8b:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      9b:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

000000a4 <__ctors_start>:
      a4:	47 0a       	sbc	r4, r23

000000a6 <__ctors_end>:
      a6:	11 24       	eor	r1, r1
      a8:	1f be       	out	0x3f, r1	; 63
      aa:	cf ef       	ldi	r28, 0xFF	; 255
      ac:	d8 e0       	ldi	r29, 0x08	; 8
      ae:	de bf       	out	0x3e, r29	; 62
      b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_copy_data>:
      b2:	11 e0       	ldi	r17, 0x01	; 1
      b4:	a0 e0       	ldi	r26, 0x00	; 0
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	e6 eb       	ldi	r30, 0xB6	; 182
      ba:	fd e1       	ldi	r31, 0x1D	; 29
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x10>
      be:	05 90       	lpm	r0, Z+
      c0:	0d 92       	st	X+, r0
      c2:	aa 35       	cpi	r26, 0x5A	; 90
      c4:	b1 07       	cpc	r27, r17
      c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0xc>

000000c8 <__do_clear_bss>:
      c8:	24 e0       	ldi	r18, 0x04	; 4
      ca:	aa e5       	ldi	r26, 0x5A	; 90
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
      d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
      d2:	a6 38       	cpi	r26, 0x86	; 134
      d4:	b2 07       	cpc	r27, r18
      d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>

000000d8 <__do_global_ctors>:
      d8:	10 e0       	ldi	r17, 0x00	; 0
      da:	c3 e5       	ldi	r28, 0x53	; 83
      dc:	d0 e0       	ldi	r29, 0x00	; 0
      de:	04 c0       	rjmp	.+8      	; 0xe8 <__do_global_ctors+0x10>
      e0:	21 97       	sbiw	r28, 0x01	; 1
      e2:	fe 01       	movw	r30, r28
      e4:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <__tablejump2__>
      e8:	c2 35       	cpi	r28, 0x52	; 82
      ea:	d1 07       	cpc	r29, r17
      ec:	c9 f7       	brne	.-14     	; 0xe0 <__do_global_ctors+0x8>
      ee:	0e 94 3f 03 	call	0x67e	; 0x67e <main>
      f2:	0c 94 d9 0e 	jmp	0x1db2	; 0x1db2 <_exit>

000000f6 <__bad_interrupt>:
      f6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fa <_ZN7BefehleC1Ev>:
Befehle::Befehle(Schrittmotor* motor){
	Befehle();
	init(motor);
}

Befehle::~Befehle(){
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	ec 01       	movw	r28, r24
     100:	0e 94 4c 09 	call	0x1298	; 0x1298 <_ZN6Usart0C1Ev>
     104:	19 82       	std	Y+1, r1	; 0x01
     106:	fe 01       	movw	r30, r28
     108:	ee 5b       	subi	r30, 0xBE	; 190
     10a:	ff 4f       	sbci	r31, 0xFF	; 255
     10c:	11 82       	std	Z+1, r1	; 0x01
     10e:	10 82       	st	Z, r1
     110:	1a 82       	std	Y+2, r1	; 0x02
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <_ZN7Befehle14anfaengeFindenEv>:
 * \author Frank Tobergte
 *
 * \brief Durchsucht den leseBuffer nach einzelnen Objekten
 * 
 ************************************************************************/
void Befehle::anfaengeFinden(void){
     118:	ff 92       	push	r15
     11a:	0f 93       	push	r16
     11c:	1f 93       	push	r17
     11e:	cf 93       	push	r28
     120:	df 93       	push	r29
     122:	ec 01       	movw	r28, r24
	int i;
	bool pause = false;
	bool trennzeichen = true;
	char *aktZeichen;

	anfaengeZaehler = 0;
     124:	dc 01       	movw	r26, r24
     126:	a8 5a       	subi	r26, 0xA8	; 168
     128:	bf 4f       	sbci	r27, 0xFF	; 255
     12a:	11 96       	adiw	r26, 0x01	; 1
     12c:	1c 92       	st	X, r1
     12e:	1e 92       	st	-X, r1
     130:	fc 01       	movw	r30, r24
     132:	ec 5b       	subi	r30, 0xBC	; 188
     134:	ff 4f       	sbci	r31, 0xFF	; 255
     136:	cd 01       	movw	r24, r26
	for(i = 0 ; i < anfaengeAnzahl ; i++)
		anfaenge[i] = 0;
     138:	11 92       	st	Z+, r1
     13a:	11 92       	st	Z+, r1
	bool pause = false;
	bool trennzeichen = true;
	char *aktZeichen;

	anfaengeZaehler = 0;
	for(i = 0 ; i < anfaengeAnzahl ; i++)
     13c:	8e 17       	cp	r24, r30
     13e:	9f 07       	cpc	r25, r31
     140:	d9 f7       	brne	.-10     	; 0x138 <_ZN7Befehle14anfaengeFindenEv+0x20>
		anfaenge[i] = 0;
		
		
	aktZeichen = leseBuffer;
     142:	fe 01       	movw	r30, r28
     144:	32 96       	adiw	r30, 0x02	; 2
	for(i = 0 ; i < leseBufferLaenge ; i++ , aktZeichen++){
		if(*aktZeichen == 0)
     146:	9a 81       	ldd	r25, Y+2	; 0x02
     148:	99 23       	and	r25, r25
     14a:	09 f4       	brne	.+2      	; 0x14e <_ZN7Befehle14anfaengeFindenEv+0x36>
     14c:	45 c0       	rjmp	.+138    	; 0x1d8 <_ZN7Befehle14anfaengeFindenEv+0xc0>
     14e:	be 01       	movw	r22, r28
     150:	6e 5b       	subi	r22, 0xBE	; 190
     152:	7f 4f       	sbci	r23, 0xFF	; 255
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	40 e0       	ldi	r20, 0x00	; 0
			if(*aktZeichen == ' '){
				trennzeichen = true;
				*aktZeichen = 0;
			}else{
				if(trennzeichen){
					anfaenge[anfaengeZaehler++] = aktZeichen;
     158:	8e 01       	movw	r16, r28
     15a:	08 5a       	subi	r16, 0xA8	; 168
     15c:	1f 4f       	sbci	r17, 0xFF	; 255
					trennzeichen = false;
     15e:	f1 2c       	mov	r15, r1
				trennzeichen = false;
			}
		}else{
				
			if(*aktZeichen == ' '){
				trennzeichen = true;
     160:	51 e0       	ldi	r21, 0x01	; 1
     162:	03 c0       	rjmp	.+6      	; 0x16a <_ZN7Befehle14anfaengeFindenEv+0x52>
		anfaenge[i] = 0;
		
		
	aktZeichen = leseBuffer;
	for(i = 0 ; i < leseBufferLaenge ; i++ , aktZeichen++){
		if(*aktZeichen == 0)
     164:	90 81       	ld	r25, Z
     166:	99 23       	and	r25, r25
     168:	b9 f1       	breq	.+110    	; 0x1d8 <_ZN7Befehle14anfaengeFindenEv+0xc0>
			break;		
		if(*aktZeichen == '\"'){
     16a:	92 32       	cpi	r25, 0x22	; 34
     16c:	19 f4       	brne	.+6      	; 0x174 <_ZN7Befehle14anfaengeFindenEv+0x5c>
			pause = !pause;
     16e:	45 27       	eor	r20, r21
			*aktZeichen = 0;
     170:	10 82       	st	Z, r1
     172:	2e c0       	rjmp	.+92     	; 0x1d0 <_ZN7Befehle14anfaengeFindenEv+0xb8>
		}
		else if(pause){
     174:	44 23       	and	r20, r20
     176:	a1 f0       	breq	.+40     	; 0x1a0 <_ZN7Befehle14anfaengeFindenEv+0x88>
			if(trennzeichen){
     178:	88 23       	and	r24, r24
     17a:	51 f1       	breq	.+84     	; 0x1d0 <_ZN7Befehle14anfaengeFindenEv+0xb8>
				anfaenge[anfaengeZaehler++] = aktZeichen;
     17c:	d8 01       	movw	r26, r16
     17e:	2d 91       	ld	r18, X+
     180:	3c 91       	ld	r19, X
     182:	11 97       	sbiw	r26, 0x01	; 1
     184:	c9 01       	movw	r24, r18
     186:	01 96       	adiw	r24, 0x01	; 1
     188:	8d 93       	st	X+, r24
     18a:	9c 93       	st	X, r25
     18c:	d9 01       	movw	r26, r18
     18e:	92 96       	adiw	r26, 0x22	; 34
     190:	aa 0f       	add	r26, r26
     192:	bb 1f       	adc	r27, r27
     194:	ac 0f       	add	r26, r28
     196:	bd 1f       	adc	r27, r29
     198:	ed 93       	st	X+, r30
     19a:	fc 93       	st	X, r31
				trennzeichen = false;
     19c:	8f 2d       	mov	r24, r15
     19e:	18 c0       	rjmp	.+48     	; 0x1d0 <_ZN7Befehle14anfaengeFindenEv+0xb8>
			}
		}else{
				
			if(*aktZeichen == ' '){
     1a0:	90 32       	cpi	r25, 0x20	; 32
     1a2:	19 f4       	brne	.+6      	; 0x1aa <_ZN7Befehle14anfaengeFindenEv+0x92>
				trennzeichen = true;
				*aktZeichen = 0;
     1a4:	10 82       	st	Z, r1
				trennzeichen = false;
			}
		}else{
				
			if(*aktZeichen == ' '){
				trennzeichen = true;
     1a6:	85 2f       	mov	r24, r21
     1a8:	13 c0       	rjmp	.+38     	; 0x1d0 <_ZN7Befehle14anfaengeFindenEv+0xb8>
				*aktZeichen = 0;
			}else{
				if(trennzeichen){
     1aa:	88 23       	and	r24, r24
     1ac:	89 f0       	breq	.+34     	; 0x1d0 <_ZN7Befehle14anfaengeFindenEv+0xb8>
					anfaenge[anfaengeZaehler++] = aktZeichen;
     1ae:	d8 01       	movw	r26, r16
     1b0:	2d 91       	ld	r18, X+
     1b2:	3c 91       	ld	r19, X
     1b4:	11 97       	sbiw	r26, 0x01	; 1
     1b6:	c9 01       	movw	r24, r18
     1b8:	01 96       	adiw	r24, 0x01	; 1
     1ba:	8d 93       	st	X+, r24
     1bc:	9c 93       	st	X, r25
     1be:	d9 01       	movw	r26, r18
     1c0:	92 96       	adiw	r26, 0x22	; 34
     1c2:	aa 0f       	add	r26, r26
     1c4:	bb 1f       	adc	r27, r27
     1c6:	ac 0f       	add	r26, r28
     1c8:	bd 1f       	adc	r27, r29
     1ca:	ed 93       	st	X+, r30
     1cc:	fc 93       	st	X, r31
					trennzeichen = false;
     1ce:	8f 2d       	mov	r24, r15
	for(i = 0 ; i < anfaengeAnzahl ; i++)
		anfaenge[i] = 0;
		
		
	aktZeichen = leseBuffer;
	for(i = 0 ; i < leseBufferLaenge ; i++ , aktZeichen++){
     1d0:	31 96       	adiw	r30, 0x01	; 1
     1d2:	6e 17       	cp	r22, r30
     1d4:	7f 07       	cpc	r23, r31
     1d6:	31 f6       	brne	.-116    	; 0x164 <_ZN7Befehle14anfaengeFindenEv+0x4c>
			
			
		}
		
	}
};
     1d8:	df 91       	pop	r29
     1da:	cf 91       	pop	r28
     1dc:	1f 91       	pop	r17
     1de:	0f 91       	pop	r16
     1e0:	ff 90       	pop	r15
     1e2:	08 95       	ret

000001e4 <_ZN7Befehle9befehlUpsEv>:
 * \author Frank Tobergte
 *
 * \brief Wertet den Befehl "ups" aus
 * \return true = Befehl konnte verarbeitet werden.
 ************************************************************************/
bool Befehle::befehlUps(){
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
	float ups;
	bool ok = false;
	if( anfaengeZaehler == 2){
     1e8:	fc 01       	movw	r30, r24
     1ea:	e8 5a       	subi	r30, 0xA8	; 168
     1ec:	ff 4f       	sbci	r31, 0xFF	; 255
     1ee:	20 81       	ld	r18, Z
     1f0:	31 81       	ldd	r19, Z+1	; 0x01
     1f2:	22 30       	cpi	r18, 0x02	; 2
     1f4:	31 05       	cpc	r19, r1
     1f6:	a1 f4       	brne	.+40     	; 0x220 <_ZN7Befehle9befehlUpsEv+0x3c>
     1f8:	ec 01       	movw	r28, r24
		ups = atof(anfaenge[1]);
     1fa:	72 97       	sbiw	r30, 0x12	; 18
     1fc:	80 81       	ld	r24, Z
     1fe:	91 81       	ldd	r25, Z+1	; 0x01
     200:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <atof>
     204:	ab 01       	movw	r20, r22
     206:	bc 01       	movw	r22, r24
		ok = motor->Speed(ups);
     208:	c6 5a       	subi	r28, 0xA6	; 166
     20a:	df 4f       	sbci	r29, 0xFF	; 255
     20c:	88 81       	ld	r24, Y
     20e:	99 81       	ldd	r25, Y+1	; 0x01
     210:	dc 01       	movw	r26, r24
     212:	ed 91       	ld	r30, X+
     214:	fc 91       	ld	r31, X
     216:	02 80       	ldd	r0, Z+2	; 0x02
     218:	f3 81       	ldd	r31, Z+3	; 0x03
     21a:	e0 2d       	mov	r30, r0
     21c:	09 95       	icall
     21e:	01 c0       	rjmp	.+2      	; 0x222 <_ZN7Befehle9befehlUpsEv+0x3e>
 * \brief Wertet den Befehl "ups" aus
 * \return true = Befehl konnte verarbeitet werden.
 ************************************************************************/
bool Befehle::befehlUps(){
	float ups;
	bool ok = false;
     220:	80 e0       	ldi	r24, 0x00	; 0
		ups = atof(anfaenge[1]);
		ok = motor->Speed(ups);
	}

	return ok;
};
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	08 95       	ret

00000228 <_ZN7Befehle10befehlUmdrEv>:
 * \author Frank Tobergte
 *
 * \brief Wertet den Befehl "umdr" aus
 * \return true = Befehl konnte verarbeitet werden.
 ************************************************************************/
bool Befehle::befehlUmdr(){
     228:	cf 92       	push	r12
     22a:	df 92       	push	r13
     22c:	ef 92       	push	r14
     22e:	ff 92       	push	r15
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	ec 01       	movw	r28, r24
	bool ok = false;
	float n;
	float t;
	if( anfaengeZaehler == 2){
     23a:	fc 01       	movw	r30, r24
     23c:	e8 5a       	subi	r30, 0xA8	; 168
     23e:	ff 4f       	sbci	r31, 0xFF	; 255
     240:	80 81       	ld	r24, Z
     242:	91 81       	ldd	r25, Z+1	; 0x01
     244:	82 30       	cpi	r24, 0x02	; 2
     246:	91 05       	cpc	r25, r1
     248:	99 f4       	brne	.+38     	; 0x270 <_ZN7Befehle10befehlUmdrEv+0x48>
		n = atof(anfaenge[1]);
     24a:	72 97       	sbiw	r30, 0x12	; 18
     24c:	80 81       	ld	r24, Z
     24e:	91 81       	ldd	r25, Z+1	; 0x01
     250:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <atof>
     254:	ab 01       	movw	r20, r22
     256:	bc 01       	movw	r22, r24
		ok = motor->UmdrehungenOhneZeit(n);
     258:	c6 5a       	subi	r28, 0xA6	; 166
     25a:	df 4f       	sbci	r29, 0xFF	; 255
     25c:	88 81       	ld	r24, Y
     25e:	99 81       	ldd	r25, Y+1	; 0x01
     260:	dc 01       	movw	r26, r24
     262:	ed 91       	ld	r30, X+
     264:	fc 91       	ld	r31, X
     266:	04 80       	ldd	r0, Z+4	; 0x04
     268:	f5 81       	ldd	r31, Z+5	; 0x05
     26a:	e0 2d       	mov	r30, r0
     26c:	09 95       	icall
     26e:	23 c0       	rjmp	.+70     	; 0x2b6 <_ZN7Befehle10befehlUmdrEv+0x8e>
	}
	else if( anfaengeZaehler == 3){
     270:	03 97       	sbiw	r24, 0x03	; 3
     272:	01 f5       	brne	.+64     	; 0x2b4 <_ZN7Befehle10befehlUmdrEv+0x8c>
		n = atof(anfaenge[1]);
     274:	fe 01       	movw	r30, r28
     276:	ea 5b       	subi	r30, 0xBA	; 186
     278:	ff 4f       	sbci	r31, 0xFF	; 255
     27a:	80 81       	ld	r24, Z
     27c:	91 81       	ldd	r25, Z+1	; 0x01
     27e:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <atof>
     282:	6b 01       	movw	r12, r22
     284:	7c 01       	movw	r14, r24
		t = atof(anfaenge[2]);
     286:	fe 01       	movw	r30, r28
     288:	e8 5b       	subi	r30, 0xB8	; 184
     28a:	ff 4f       	sbci	r31, 0xFF	; 255
     28c:	80 81       	ld	r24, Z
     28e:	91 81       	ldd	r25, Z+1	; 0x01
     290:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <atof>
     294:	8b 01       	movw	r16, r22
     296:	9c 01       	movw	r18, r24
		ok = motor->UmdrehungenMitZeit(n,t);
     298:	c6 5a       	subi	r28, 0xA6	; 166
     29a:	df 4f       	sbci	r29, 0xFF	; 255
     29c:	88 81       	ld	r24, Y
     29e:	99 81       	ldd	r25, Y+1	; 0x01
     2a0:	dc 01       	movw	r26, r24
     2a2:	ed 91       	ld	r30, X+
     2a4:	fc 91       	ld	r31, X
     2a6:	06 80       	ldd	r0, Z+6	; 0x06
     2a8:	f7 81       	ldd	r31, Z+7	; 0x07
     2aa:	e0 2d       	mov	r30, r0
     2ac:	b7 01       	movw	r22, r14
     2ae:	a6 01       	movw	r20, r12
     2b0:	09 95       	icall
     2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <_ZN7Befehle10befehlUmdrEv+0x8e>
 *
 * \brief Wertet den Befehl "umdr" aus
 * \return true = Befehl konnte verarbeitet werden.
 ************************************************************************/
bool Befehle::befehlUmdr(){
	bool ok = false;
     2b4:	80 e0       	ldi	r24, 0x00	; 0
		n = atof(anfaenge[1]);
		t = atof(anfaenge[2]);
		ok = motor->UmdrehungenMitZeit(n,t);
	}
	return ok;
};
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	ff 90       	pop	r15
     2c0:	ef 90       	pop	r14
     2c2:	df 90       	pop	r13
     2c4:	cf 90       	pop	r12
     2c6:	08 95       	ret

000002c8 <_ZN7Befehle11befehlPowerEv>:
 * \author Frank Tobergte
 *
 * \brief Wertet den Befehl "power" aus
 * \return true = Befehl konnte verarbeitet werden.
 ************************************************************************/
bool Befehle::befehlPower(){
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
	bool ok = false;
	if( anfaengeZaehler == 2){
     2d0:	fc 01       	movw	r30, r24
     2d2:	e8 5a       	subi	r30, 0xA8	; 168
     2d4:	ff 4f       	sbci	r31, 0xFF	; 255
     2d6:	20 81       	ld	r18, Z
     2d8:	31 81       	ldd	r19, Z+1	; 0x01
     2da:	22 30       	cpi	r18, 0x02	; 2
     2dc:	31 05       	cpc	r19, r1
     2de:	61 f5       	brne	.+88     	; 0x338 <_ZN7Befehle11befehlPowerEv+0x70>
     2e0:	ec 01       	movw	r28, r24
		if(strcmp(anfaenge[1], "on") == 0){
     2e2:	72 97       	sbiw	r30, 0x12	; 18
     2e4:	00 81       	ld	r16, Z
     2e6:	11 81       	ldd	r17, Z+1	; 0x01
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	71 e0       	ldi	r23, 0x01	; 1
     2ec:	c8 01       	movw	r24, r16
     2ee:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <strcmp>
     2f2:	89 2b       	or	r24, r25
     2f4:	69 f4       	brne	.+26     	; 0x310 <_ZN7Befehle11befehlPowerEv+0x48>
			ok = motor->Power(true);
     2f6:	c6 5a       	subi	r28, 0xA6	; 166
     2f8:	df 4f       	sbci	r29, 0xFF	; 255
     2fa:	88 81       	ld	r24, Y
     2fc:	99 81       	ldd	r25, Y+1	; 0x01
     2fe:	dc 01       	movw	r26, r24
     300:	ed 91       	ld	r30, X+
     302:	fc 91       	ld	r31, X
     304:	01 90       	ld	r0, Z+
     306:	f0 81       	ld	r31, Z
     308:	e0 2d       	mov	r30, r0
     30a:	61 e0       	ldi	r22, 0x01	; 1
     30c:	09 95       	icall
     30e:	17 c0       	rjmp	.+46     	; 0x33e <_ZN7Befehle11befehlPowerEv+0x76>
		}else if(strcmp(anfaenge[1], "off") == 0){
     310:	63 e0       	ldi	r22, 0x03	; 3
     312:	71 e0       	ldi	r23, 0x01	; 1
     314:	c8 01       	movw	r24, r16
     316:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <strcmp>
     31a:	89 2b       	or	r24, r25
     31c:	79 f4       	brne	.+30     	; 0x33c <_ZN7Befehle11befehlPowerEv+0x74>
			ok = motor->Power(false);
     31e:	c6 5a       	subi	r28, 0xA6	; 166
     320:	df 4f       	sbci	r29, 0xFF	; 255
     322:	88 81       	ld	r24, Y
     324:	99 81       	ldd	r25, Y+1	; 0x01
     326:	dc 01       	movw	r26, r24
     328:	ed 91       	ld	r30, X+
     32a:	fc 91       	ld	r31, X
     32c:	01 90       	ld	r0, Z+
     32e:	f0 81       	ld	r31, Z
     330:	e0 2d       	mov	r30, r0
     332:	60 e0       	ldi	r22, 0x00	; 0
     334:	09 95       	icall
     336:	03 c0       	rjmp	.+6      	; 0x33e <_ZN7Befehle11befehlPowerEv+0x76>
 *
 * \brief Wertet den Befehl "power" aus
 * \return true = Befehl konnte verarbeitet werden.
 ************************************************************************/
bool Befehle::befehlPower(){
	bool ok = false;
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	01 c0       	rjmp	.+2      	; 0x33e <_ZN7Befehle11befehlPowerEv+0x76>
     33c:	80 e0       	ldi	r24, 0x00	; 0
			ok = motor->Power(false);

		}
	}
	return ok;
};
     33e:	df 91       	pop	r29
     340:	cf 91       	pop	r28
     342:	1f 91       	pop	r17
     344:	0f 91       	pop	r16
     346:	08 95       	ret

00000348 <_ZN7Befehle14schreibePromptEb>:
 *
 * \brief Schreibt das Prompt abhaengig von der Ausfuehrung.
 * \param ok = true; Ausfuehrung war ok
 ************************************************************************/
void Befehle::schreibePrompt(bool ok){
	if(ok)
     348:	66 23       	and	r22, r22
     34a:	29 f0       	breq	.+10     	; 0x356 <_ZN7Befehle14schreibePromptEb+0xe>
		uart.sende(" --> OK\r\n>: ");
     34c:	87 e0       	ldi	r24, 0x07	; 7
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN6Usart05sendeEPKc>
     354:	08 95       	ret
	else
		uart.sende(" --> ERROR\r\n>: ");
     356:	84 e1       	ldi	r24, 0x14	; 20
     358:	91 e0       	ldi	r25, 0x01	; 1
     35a:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN6Usart05sendeEPKc>
     35e:	08 95       	ret

00000360 <_ZN7Befehle4initEP12Schrittmotor>:
 *
 * \brief Initzialisierumg
 * \param motor der angesteuert wird.
 ************************************************************************/
void Befehle::init(Schrittmotor* motor){
	this->motor = motor;
     360:	fc 01       	movw	r30, r24
     362:	e6 5a       	subi	r30, 0xA6	; 166
     364:	ff 4f       	sbci	r31, 0xFF	; 255
     366:	71 83       	std	Z+1, r23	; 0x01
     368:	60 83       	st	Z, r22
	schreibePrompt(true);
     36a:	61 e0       	ldi	r22, 0x01	; 1
     36c:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN7Befehle14schreibePromptEb>
     370:	08 95       	ret

00000372 <_ZN7BefehleC1EP12Schrittmotor>:
 * \author Frank Tobergte
 *
 * \brief Konstruktor mit uebergabe des Motors.
 * \param motor der angesteuert wird.
 ************************************************************************/
Befehle::Befehle(Schrittmotor* motor){
     372:	ef 92       	push	r14
     374:	ff 92       	push	r15
     376:	0f 93       	push	r16
     378:	1f 93       	push	r17
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	cd b7       	in	r28, 0x3d	; 61
     380:	de b7       	in	r29, 0x3e	; 62
     382:	cc 55       	subi	r28, 0x5C	; 92
     384:	d1 09       	sbc	r29, r1
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	f8 94       	cli
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	cd bf       	out	0x3d, r28	; 61
     390:	8c 01       	movw	r16, r24
     392:	7b 01       	movw	r14, r22
     394:	0e 94 4c 09 	call	0x1298	; 0x1298 <_ZN6Usart0C1Ev>
	Befehle();
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	0e 94 7d 00 	call	0xfa	; 0xfa <_ZN7BefehleC1Ev>
	init(motor);
     3a0:	b7 01       	movw	r22, r14
     3a2:	c8 01       	movw	r24, r16
     3a4:	0e 94 b0 01 	call	0x360	; 0x360 <_ZN7Befehle4initEP12Schrittmotor>
}
     3a8:	c4 5a       	subi	r28, 0xA4	; 164
     3aa:	df 4f       	sbci	r29, 0xFF	; 255
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	f8 94       	cli
     3b0:	de bf       	out	0x3e, r29	; 62
     3b2:	0f be       	out	0x3f, r0	; 63
     3b4:	cd bf       	out	0x3d, r28	; 61
     3b6:	df 91       	pop	r29
     3b8:	cf 91       	pop	r28
     3ba:	1f 91       	pop	r17
     3bc:	0f 91       	pop	r16
     3be:	ff 90       	pop	r15
     3c0:	ef 90       	pop	r14
     3c2:	08 95       	ret

000003c4 <_ZN7Befehle9auswertenEPc>:
 *
 * \brief In der Zeile nach Befehlen suchen
 * \param text der ausgewertet wird
 * \return true = Befehl konnte verarbeitet werden
 ************************************************************************/
bool Befehle::auswerten(char* text){
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	ec 01       	movw	r28, r24

	bool ok = false;
	anfaengeFinden();
     3ce:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN7Befehle14anfaengeFindenEv>
	
	if(strcmp(anfaenge[0],"ups") == 0)
     3d2:	fe 01       	movw	r30, r28
     3d4:	ec 5b       	subi	r30, 0xBC	; 188
     3d6:	ff 4f       	sbci	r31, 0xFF	; 255
     3d8:	00 81       	ld	r16, Z
     3da:	11 81       	ldd	r17, Z+1	; 0x01
     3dc:	64 e2       	ldi	r22, 0x24	; 36
     3de:	71 e0       	ldi	r23, 0x01	; 1
     3e0:	c8 01       	movw	r24, r16
     3e2:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <strcmp>
     3e6:	89 2b       	or	r24, r25
     3e8:	29 f4       	brne	.+10     	; 0x3f4 <_ZN7Befehle9auswertenEPc+0x30>
		ok = befehlUps();
     3ea:	ce 01       	movw	r24, r28
     3ec:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_ZN7Befehle9befehlUpsEv>
     3f0:	68 2f       	mov	r22, r24
     3f2:	19 c0       	rjmp	.+50     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
/*
	else if(strcmp(anfaenge[0],"pps") == 0)
		ok = befehlPps();
*/		
	else if(strcmp(anfaenge[0],"umdr") == 0)
     3f4:	68 e2       	ldi	r22, 0x28	; 40
     3f6:	71 e0       	ldi	r23, 0x01	; 1
     3f8:	c8 01       	movw	r24, r16
     3fa:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <strcmp>
     3fe:	89 2b       	or	r24, r25
     400:	29 f4       	brne	.+10     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
	ok = befehlUmdr();
     402:	ce 01       	movw	r24, r28
     404:	0e 94 14 01 	call	0x228	; 0x228 <_ZN7Befehle10befehlUmdrEv>
     408:	68 2f       	mov	r22, r24
     40a:	0d c0       	rjmp	.+26     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	ok = befehlStopp();

	else if(strcmp(anfaenge[0],"stop") == 0)
	ok = befehlStopp();
*/	
	else if(strcmp(anfaenge[0],"power") == 0)
     40c:	6d e2       	ldi	r22, 0x2D	; 45
     40e:	71 e0       	ldi	r23, 0x01	; 1
     410:	c8 01       	movw	r24, r16
     412:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <strcmp>
     416:	89 2b       	or	r24, r25
     418:	29 f4       	brne	.+10     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	ok = befehlPower();
     41a:	ce 01       	movw	r24, r28
     41c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <_ZN7Befehle11befehlPowerEv>
     420:	68 2f       	mov	r22, r24
     422:	01 c0       	rjmp	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 * \param text der ausgewertet wird
 * \return true = Befehl konnte verarbeitet werden
 ************************************************************************/
bool Befehle::auswerten(char* text){

	bool ok = false;
     424:	60 e0       	ldi	r22, 0x00	; 0
*/	
	else if(strcmp(anfaenge[0],"power") == 0)
	ok = befehlPower();
	

	schreibePrompt(ok);
     426:	ce 01       	movw	r24, r28
     428:	0e 94 a4 01 	call	0x348	; 0x348 <_ZN7Befehle14schreibePromptEb>
	
	return true;	
}
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	df 91       	pop	r29
     430:	cf 91       	pop	r28
     432:	1f 91       	pop	r17
     434:	0f 91       	pop	r16
     436:	08 95       	ret

00000438 <_ZN7Befehle5lesenEv>:
 * \author Frank Tobergte
 *
 * \brief Zeichen sammeln bis eine Zeile komplett ist
 * 
 ************************************************************************/
void Befehle::lesen(void){
     438:	0f 93       	push	r16
     43a:	1f 93       	push	r17
     43c:	cf 93       	push	r28
     43e:	df 93       	push	r29
     440:	ec 01       	movw	r28, r24
	
	switch (steps)
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	82 30       	cpi	r24, 0x02	; 2
     446:	41 f1       	breq	.+80     	; 0x498 <_ZN7Befehle5lesenEv+0x60>
     448:	83 30       	cpi	r24, 0x03	; 3
     44a:	09 f4       	brne	.+2      	; 0x44e <_ZN7Befehle5lesenEv+0x16>
     44c:	4a c0       	rjmp	.+148    	; 0x4e2 <_ZN7Befehle5lesenEv+0xaa>
     44e:	81 30       	cpi	r24, 0x01	; 1
     450:	39 f0       	breq	.+14     	; 0x460 <_ZN7Befehle5lesenEv+0x28>
	{
		default:
		case INIT:
			steps = WARTE;
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	89 83       	std	Y+1, r24	; 0x01
			schreibPosLeseBuffer = 0;		
     456:	ce 5b       	subi	r28, 0xBE	; 190
     458:	df 4f       	sbci	r29, 0xFF	; 255
     45a:	19 82       	std	Y+1, r1	; 0x01
     45c:	18 82       	st	Y, r1
			break;
     45e:	48 c0       	rjmp	.+144    	; 0x4f0 <_ZN7Befehle5lesenEv+0xb8>
	
		case WARTE:
			while(uart.isWasZuLesen())
     460:	0e 94 b9 09 	call	0x1372	; 0x1372 <_ZN6Usart012isWasZuLesenEv>
     464:	88 23       	and	r24, r24
     466:	09 f4       	brne	.+2      	; 0x46a <_ZN7Befehle5lesenEv+0x32>
     468:	43 c0       	rjmp	.+134    	; 0x4f0 <_ZN7Befehle5lesenEv+0xb8>
			{
				char zeichen;
				zeichen = uart.lesen();
     46a:	0e 94 c0 09 	call	0x1380	; 0x1380 <_ZN6Usart05lesenEv>
				if((zeichen != '\r') && (zeichen != '\n')){
     46e:	8d 30       	cpi	r24, 0x0D	; 13
     470:	b9 f3       	breq	.-18     	; 0x460 <_ZN7Befehle5lesenEv+0x28>
     472:	8a 30       	cpi	r24, 0x0A	; 10
     474:	a9 f3       	breq	.-22     	; 0x460 <_ZN7Befehle5lesenEv+0x28>
					leseBuffer[schreibPosLeseBuffer++] = zeichen;
     476:	fe 01       	movw	r30, r28
     478:	ee 5b       	subi	r30, 0xBE	; 190
     47a:	ff 4f       	sbci	r31, 0xFF	; 255
     47c:	20 81       	ld	r18, Z
     47e:	31 81       	ldd	r19, Z+1	; 0x01
     480:	a9 01       	movw	r20, r18
     482:	4f 5f       	subi	r20, 0xFF	; 255
     484:	5f 4f       	sbci	r21, 0xFF	; 255
     486:	51 83       	std	Z+1, r21	; 0x01
     488:	40 83       	st	Z, r20
     48a:	fe 01       	movw	r30, r28
     48c:	e2 0f       	add	r30, r18
     48e:	f3 1f       	adc	r31, r19
     490:	82 83       	std	Z+2, r24	; 0x02
					steps = LESE;
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	89 83       	std	Y+1, r24	; 0x01
					break;
     496:	2c c0       	rjmp	.+88     	; 0x4f0 <_ZN7Befehle5lesenEv+0xb8>
				if((zeichen == '\r') || (zeichen == '\n')){
					steps = AUSWERTEN;
					leseBuffer[schreibPosLeseBuffer] = 0 ;
					break;
				}
				leseBuffer[schreibPosLeseBuffer++] = zeichen;
     498:	8e 01       	movw	r16, r28
     49a:	0e 5b       	subi	r16, 0xBE	; 190
     49c:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
			break;	
		
		case LESE:
			while(uart.isWasZuLesen())
     49e:	0e 94 b9 09 	call	0x1372	; 0x1372 <_ZN6Usart012isWasZuLesenEv>
     4a2:	88 23       	and	r24, r24
     4a4:	29 f1       	breq	.+74     	; 0x4f0 <_ZN7Befehle5lesenEv+0xb8>
			{
				char zeichen;
				zeichen = uart.lesen();
     4a6:	0e 94 c0 09 	call	0x1380	; 0x1380 <_ZN6Usart05lesenEv>
				if((zeichen == '\r') || (zeichen == '\n')){
     4aa:	8d 30       	cpi	r24, 0x0D	; 13
     4ac:	11 f0       	breq	.+4      	; 0x4b2 <_ZN7Befehle5lesenEv+0x7a>
     4ae:	8a 30       	cpi	r24, 0x0A	; 10
     4b0:	59 f4       	brne	.+22     	; 0x4c8 <_ZN7Befehle5lesenEv+0x90>
					steps = AUSWERTEN;
     4b2:	83 e0       	ldi	r24, 0x03	; 3
     4b4:	89 83       	std	Y+1, r24	; 0x01
					leseBuffer[schreibPosLeseBuffer] = 0 ;
     4b6:	fe 01       	movw	r30, r28
     4b8:	ee 5b       	subi	r30, 0xBE	; 190
     4ba:	ff 4f       	sbci	r31, 0xFF	; 255
     4bc:	80 81       	ld	r24, Z
     4be:	91 81       	ldd	r25, Z+1	; 0x01
     4c0:	c8 0f       	add	r28, r24
     4c2:	d9 1f       	adc	r29, r25
     4c4:	1a 82       	std	Y+2, r1	; 0x02
					break;
     4c6:	14 c0       	rjmp	.+40     	; 0x4f0 <_ZN7Befehle5lesenEv+0xb8>
				}
				leseBuffer[schreibPosLeseBuffer++] = zeichen;
     4c8:	f8 01       	movw	r30, r16
     4ca:	20 81       	ld	r18, Z
     4cc:	31 81       	ldd	r19, Z+1	; 0x01
     4ce:	a9 01       	movw	r20, r18
     4d0:	4f 5f       	subi	r20, 0xFF	; 255
     4d2:	5f 4f       	sbci	r21, 0xFF	; 255
     4d4:	51 83       	std	Z+1, r21	; 0x01
     4d6:	40 83       	st	Z, r20
     4d8:	fe 01       	movw	r30, r28
     4da:	e2 0f       	add	r30, r18
     4dc:	f3 1f       	adc	r31, r19
     4de:	82 83       	std	Z+2, r24	; 0x02
				}
			}
			break;	
		
		case LESE:
			while(uart.isWasZuLesen())
     4e0:	de cf       	rjmp	.-68     	; 0x49e <_ZN7Befehle5lesenEv+0x66>
				leseBuffer[schreibPosLeseBuffer++] = zeichen;
			}
			break;
			
		case AUSWERTEN:
			auswerten(leseBuffer);
     4e2:	be 01       	movw	r22, r28
     4e4:	6e 5f       	subi	r22, 0xFE	; 254
     4e6:	7f 4f       	sbci	r23, 0xFF	; 255
     4e8:	ce 01       	movw	r24, r28
     4ea:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <_ZN7Befehle9auswertenEPc>
			steps = INIT;
     4ee:	19 82       	std	Y+1, r1	; 0x01
			break;
	}
}
     4f0:	df 91       	pop	r29
     4f2:	cf 91       	pop	r28
     4f4:	1f 91       	pop	r17
     4f6:	0f 91       	pop	r16
     4f8:	08 95       	ret

000004fa <_ZN7Befehle4stepEv>:
 *
 * \brief Auswertung der empfangenen Zeichen
 * 
 ************************************************************************/
void Befehle::step(void){
	lesen();	
     4fa:	0e 94 1c 02 	call	0x438	; 0x438 <_ZN7Befehle5lesenEv>
     4fe:	08 95       	ret

00000500 <__vector_7>:
 * \brief Schaltet den Timer 0 ein.
 * \remark wir auch von timer0Prescaler() gemacht
 ************************************************************************/
void InOut::timer0On(void){
	TCCR0A = (0<<COM0A1) | (1<<COM0A0) | // Toggle OC0A on Compare Match
	(1<<WGM01) | (0<<WGM00);			 // CTC
     500:	1f 92       	push	r1
     502:	0f 92       	push	r0
     504:	0f b6       	in	r0, 0x3f	; 63
     506:	0f 92       	push	r0
     508:	11 24       	eor	r1, r1
     50a:	2f 93       	push	r18
     50c:	3f 93       	push	r19
     50e:	4f 93       	push	r20
     510:	5f 93       	push	r21
     512:	6f 93       	push	r22
     514:	7f 93       	push	r23
     516:	8f 93       	push	r24
     518:	9f 93       	push	r25
     51a:	af 93       	push	r26
     51c:	bf 93       	push	r27
     51e:	ef 93       	push	r30
     520:	ff 93       	push	r31
     522:	6a e0       	ldi	r22, 0x0A	; 10
     524:	77 ed       	ldi	r23, 0xD7	; 215
     526:	83 e2       	ldi	r24, 0x23	; 35
     528:	9c e3       	ldi	r25, 0x3C	; 60
     52a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <_ZN12Schrittmotor4TickEf>
     52e:	ff 91       	pop	r31
     530:	ef 91       	pop	r30
     532:	bf 91       	pop	r27
     534:	af 91       	pop	r26
     536:	9f 91       	pop	r25
     538:	8f 91       	pop	r24
     53a:	7f 91       	pop	r23
     53c:	6f 91       	pop	r22
     53e:	5f 91       	pop	r21
     540:	4f 91       	pop	r20
     542:	3f 91       	pop	r19
     544:	2f 91       	pop	r18
     546:	0f 90       	pop	r0
     548:	0f be       	out	0x3f, r0	; 63
     54a:	0f 90       	pop	r0
     54c:	1f 90       	pop	r1
     54e:	18 95       	reti

00000550 <_ZN5InOut10initTimer2Ev>:
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     556:	97 e0       	ldi	r25, 0x07	; 7
     558:	90 93 b1 00 	sts	0x00B1, r25	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     55c:	9c e9       	ldi	r25, 0x9C	; 156
     55e:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
     562:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
     566:	08 95       	ret

00000568 <_ZN5InOut4InitEv>:
     568:	84 b1       	in	r24, 0x04	; 4
     56a:	82 62       	ori	r24, 0x22	; 34
     56c:	84 b9       	out	0x04, r24	; 4
     56e:	8a b1       	in	r24, 0x0a	; 10
     570:	8c 64       	ori	r24, 0x4C	; 76
     572:	8a b9       	out	0x0a, r24	; 10
     574:	2d 9a       	sbi	0x05, 5	; 5
     576:	5e 98       	cbi	0x0b, 6	; 11
     578:	5a 9a       	sbi	0x0b, 2	; 11
     57a:	0e 94 a8 02 	call	0x550	; 0x550 <_ZN5InOut10initTimer2Ev>
     57e:	08 95       	ret

00000580 <_ZN5InOut5PowerEb>:
     580:	88 23       	and	r24, r24
     582:	11 f0       	breq	.+4      	; 0x588 <_ZN5InOut5PowerEb+0x8>
     584:	5a 98       	cbi	0x0b, 2	; 11
     586:	08 95       	ret
     588:	5a 9a       	sbi	0x0b, 2	; 11
     58a:	08 95       	ret

0000058c <_ZN5InOut8RichtungEb>:
     58c:	81 11       	cpse	r24, r1
     58e:	02 c0       	rjmp	.+4      	; 0x594 <_ZN5InOut8RichtungEb+0x8>
     590:	5b 98       	cbi	0x0b, 3	; 11
     592:	08 95       	ret
     594:	5b 9a       	sbi	0x0b, 3	; 11
     596:	08 95       	ret

00000598 <_ZN5InOut9timer0OffEv>:
     598:	14 bc       	out	0x24, r1	; 36
     59a:	15 bc       	out	0x25, r1	; 37
     59c:	5e 98       	cbi	0x0b, 6	; 11
     59e:	08 95       	ret

000005a0 <_ZN5InOut15timer0PrescalerEh>:
 *
 * \brief Setzt den Prscaler von Timer 0 auf den gewuenschten Faktor
 * \param prescaler der Faktor dicht des Register Wert
 ************************************************************************/
void InOut::timer0Prescaler(unsigned char prescaler){
	prescaler &= 0x7;
     5a0:	87 70       	andi	r24, 0x07	; 7
	TCCR0A = (0<<COM0A1) | (1<<COM0A0) | // Toggle OC0A on Compare Match
	(1<<WGM01) | (0<<WGM00);			 // CTC
     5a2:	92 e4       	ldi	r25, 0x42	; 66
     5a4:	94 bd       	out	0x24, r25	; 36
	
	TCCR0B = (0<<WGM02) |				 // CTC
	(prescaler<<CS00);	 // Prescaler
     5a6:	85 bd       	out	0x25, r24	; 37
     5a8:	08 95       	ret

000005aa <_ZN5InOut5SpeedEm>:
 *
 * \brief Motor Geschwindigkeit setzen
 * \param pps Anzahl der Motor Pulse pro Sekunde
 ************************************************************************/

void InOut::Speed(unsigned long pps){
     5aa:	cf 92       	push	r12
     5ac:	df 92       	push	r13
     5ae:	ef 92       	push	r14
     5b0:	ff 92       	push	r15
	if(pps){
     5b2:	61 15       	cp	r22, r1
     5b4:	71 05       	cpc	r23, r1
     5b6:	81 05       	cpc	r24, r1
     5b8:	91 05       	cpc	r25, r1
     5ba:	09 f4       	brne	.+2      	; 0x5be <_ZN5InOut5SpeedEm+0x14>
     5bc:	59 c0       	rjmp	.+178    	; 0x670 <_ZN5InOut5SpeedEm+0xc6>
		unsigned int grob = 1;
		float takte = round(16e6 / 2 / pps);
     5be:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__floatunsisf>
     5c2:	9b 01       	movw	r18, r22
     5c4:	ac 01       	movw	r20, r24
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	74 e2       	ldi	r23, 0x24	; 36
     5ca:	84 ef       	ldi	r24, 0xF4	; 244
     5cc:	9a e4       	ldi	r25, 0x4A	; 74
     5ce:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__divsf3>
     5d2:	0e 94 8e 0c 	call	0x191c	; 0x191c <round>
     5d6:	6b 01       	movw	r12, r22
     5d8:	7c 01       	movw	r14, r24
		if(takte > 0xffff)
     5da:	20 e0       	ldi	r18, 0x00	; 0
     5dc:	3f ef       	ldi	r19, 0xFF	; 255
     5de:	4f e7       	ldi	r20, 0x7F	; 127
     5e0:	57 e4       	ldi	r21, 0x47	; 71
     5e2:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__gesf2>
     5e6:	18 16       	cp	r1, r24
     5e8:	a4 f0       	brlt	.+40     	; 0x612 <_ZN5InOut5SpeedEm+0x68>
		takte = 0xffff;
		unsigned int fein = takte;
     5ea:	c7 01       	movw	r24, r14
     5ec:	b6 01       	movw	r22, r12
     5ee:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__fixunssfsi>
     5f2:	9b 01       	movw	r18, r22
		if (fein > 255)
     5f4:	6f 3f       	cpi	r22, 0xFF	; 255
     5f6:	71 05       	cpc	r23, r1
     5f8:	31 f1       	breq	.+76     	; 0x646 <_ZN5InOut5SpeedEm+0x9c>
     5fa:	28 f1       	brcs	.+74     	; 0x646 <_ZN5InOut5SpeedEm+0x9c>
		{
			grob++;
			fein >>= 3;
     5fc:	36 95       	lsr	r19
     5fe:	27 95       	ror	r18
     600:	36 95       	lsr	r19
     602:	27 95       	ror	r18
     604:	36 95       	lsr	r19
     606:	27 95       	ror	r18
		}
		
		if (fein > 255)
     608:	2f 3f       	cpi	r18, 0xFF	; 255
     60a:	31 05       	cpc	r19, r1
     60c:	09 f0       	breq	.+2      	; 0x610 <_ZN5InOut5SpeedEm+0x66>
     60e:	18 f4       	brcc	.+6      	; 0x616 <_ZN5InOut5SpeedEm+0x6c>
     610:	20 c0       	rjmp	.+64     	; 0x652 <_ZN5InOut5SpeedEm+0xa8>
		takte = 0xffff;
		unsigned int fein = takte;
		if (fein > 255)
		{
			grob++;
			fein >>= 3;
     612:	2f ef       	ldi	r18, 0xFF	; 255
     614:	3f e1       	ldi	r19, 0x1F	; 31
		}
		
		if (fein > 255)
		{
			grob++;
			fein >>= 3;
     616:	36 95       	lsr	r19
     618:	27 95       	ror	r18
     61a:	36 95       	lsr	r19
     61c:	27 95       	ror	r18
     61e:	36 95       	lsr	r19
     620:	27 95       	ror	r18
		}
		
		if (fein > 255)
     622:	2f 3f       	cpi	r18, 0xFF	; 255
     624:	31 05       	cpc	r19, r1
     626:	b9 f0       	breq	.+46     	; 0x656 <_ZN5InOut5SpeedEm+0xac>
     628:	b0 f0       	brcs	.+44     	; 0x656 <_ZN5InOut5SpeedEm+0xac>
		{
			grob++;
			fein >>= 2;
     62a:	36 95       	lsr	r19
     62c:	27 95       	ror	r18
     62e:	36 95       	lsr	r19
     630:	27 95       	ror	r18
		}
		
		if (fein > 255)
     632:	2f 3f       	cpi	r18, 0xFF	; 255
     634:	31 05       	cpc	r19, r1
     636:	89 f0       	breq	.+34     	; 0x65a <_ZN5InOut5SpeedEm+0xb0>
     638:	80 f0       	brcs	.+32     	; 0x65a <_ZN5InOut5SpeedEm+0xb0>
		{
			grob++;
			fein >>= 2;
     63a:	36 95       	lsr	r19
     63c:	27 95       	ror	r18
     63e:	36 95       	lsr	r19
     640:	27 95       	ror	r18
			fein >>= 2;
		}
		
		if (fein > 255)
		{
			grob++;
     642:	85 e0       	ldi	r24, 0x05	; 5
     644:	01 c0       	rjmp	.+2      	; 0x648 <_ZN5InOut5SpeedEm+0x9e>
 * \param pps Anzahl der Motor Pulse pro Sekunde
 ************************************************************************/

void InOut::Speed(unsigned long pps){
	if(pps){
		unsigned int grob = 1;
     646:	81 e0       	ldi	r24, 0x01	; 1
			grob++;
			fein >>= 2;
		}
			
		
		if(fein <= 255){
     648:	2f 3f       	cpi	r18, 0xFF	; 255
     64a:	31 05       	cpc	r19, r1
     64c:	09 f0       	breq	.+2      	; 0x650 <_ZN5InOut5SpeedEm+0xa6>
     64e:	50 f4       	brcc	.+20     	; 0x664 <_ZN5InOut5SpeedEm+0xba>
     650:	05 c0       	rjmp	.+10     	; 0x65c <_ZN5InOut5SpeedEm+0xb2>
		if(takte > 0xffff)
		takte = 0xffff;
		unsigned int fein = takte;
		if (fein > 255)
		{
			grob++;
     652:	82 e0       	ldi	r24, 0x02	; 2
     654:	03 c0       	rjmp	.+6      	; 0x65c <_ZN5InOut5SpeedEm+0xb2>
			fein >>= 3;
		}
		
		if (fein > 255)
		{
			grob++;
     656:	83 e0       	ldi	r24, 0x03	; 3
     658:	01 c0       	rjmp	.+2      	; 0x65c <_ZN5InOut5SpeedEm+0xb2>
			fein >>= 3;
		}
		
		if (fein > 255)
		{
			grob++;
     65a:	84 e0       	ldi	r24, 0x04	; 4
			fein >>= 2;
		}
			
		
		if(fein <= 255){
			OCR0A = fein;
     65c:	27 bd       	out	0x27, r18	; 39
			timer0Prescaler(grob);
     65e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN5InOut15timer0PrescalerEh>
     662:	08 c0       	rjmp	.+16     	; 0x674 <_ZN5InOut5SpeedEm+0xca>
		}else{
			OCR0A = 255;
     664:	8f ef       	ldi	r24, 0xFF	; 255
     666:	87 bd       	out	0x27, r24	; 39
			timer0Prescaler(5);
     668:	85 e0       	ldi	r24, 0x05	; 5
     66a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <_ZN5InOut15timer0PrescalerEh>
     66e:	02 c0       	rjmp	.+4      	; 0x674 <_ZN5InOut5SpeedEm+0xca>
		}

			
	}else{
		timer0Off();
     670:	0e 94 cc 02 	call	0x598	; 0x598 <_ZN5InOut9timer0OffEv>
	}
	
}
     674:	ff 90       	pop	r15
     676:	ef 90       	pop	r14
     678:	df 90       	pop	r13
     67a:	cf 90       	pop	r12
     67c:	08 95       	ret

0000067e <main>:
 *
 * \return errorcode
 *
 ************************************************************************/
int main(void)
{
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	cd b7       	in	r28, 0x3d	; 61
     684:	de b7       	in	r29, 0x3e	; 62
     686:	c8 5a       	subi	r28, 0xA8	; 168
     688:	d1 09       	sbc	r29, r1
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	f8 94       	cli
     68e:	de bf       	out	0x3e, r29	; 62
     690:	0f be       	out	0x3f, r0	; 63
     692:	cd bf       	out	0x3d, r28	; 61
	InOut::Init();
     694:	0e 94 b4 02 	call	0x568	; 0x568 <_ZN5InOut4InitEv>
	Usart0 tty(115000L);
     698:	48 e3       	ldi	r20, 0x38	; 56
     69a:	51 ec       	ldi	r21, 0xC1	; 193
     69c:	61 e0       	ldi	r22, 0x01	; 1
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	ce 01       	movw	r24, r28
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	0e 94 8d 09 	call	0x131a	; 0x131a <_ZN6Usart0C1El>
	Schrittmotor schrittmotor;
     6a8:	ce 01       	movw	r24, r28
     6aa:	02 96       	adiw	r24, 0x02	; 2
     6ac:	0e 94 0e 04 	call	0x81c	; 0x81c <_ZN12SchrittmotorC1Ev>

	Befehle befehle(&schrittmotor);
     6b0:	be 01       	movw	r22, r28
     6b2:	6e 5f       	subi	r22, 0xFE	; 254
     6b4:	7f 4f       	sbci	r23, 0xFF	; 255
     6b6:	ce 01       	movw	r24, r28
     6b8:	83 5b       	subi	r24, 0xB3	; 179
     6ba:	9f 4f       	sbci	r25, 0xFF	; 255
     6bc:	0e 94 b9 01 	call	0x372	; 0x372 <_ZN7BefehleC1EP12Schrittmotor>
	//schrittmotor.Power(true);
	//schrittmotor.Speed(-4.0);
    /* Replace with your application code */
	sei();
     6c0:	78 94       	sei
	tty.sende("Pumpe1:\r\n");
     6c2:	83 e3       	ldi	r24, 0x33	; 51
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN6Usart05sendeEPKc>
    while (1) 
    {
		befehle.step();
     6ca:	ce 01       	movw	r24, r28
     6cc:	83 5b       	subi	r24, 0xB3	; 179
     6ce:	9f 4f       	sbci	r25, 0xFF	; 255
     6d0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <_ZN7Befehle4stepEv>
     6d4:	fa cf       	rjmp	.-12     	; 0x6ca <main+0x4c>

000006d6 <_ZN10RingbufferC1Ev>:
 *
 * \brief 
 * 
 ************************************************************************/
Ringbuffer::Ringbuffer(void){
	schreibePos = 0;
     6d6:	fc 01       	movw	r30, r24
     6d8:	e0 57       	subi	r30, 0x70	; 112
     6da:	fe 4f       	sbci	r31, 0xFE	; 254
     6dc:	11 82       	std	Z+1, r1	; 0x01
     6de:	10 82       	st	Z, r1
	lesePos = 0;
     6e0:	32 96       	adiw	r30, 0x02	; 2
     6e2:	11 82       	std	Z+1, r1	; 0x01
     6e4:	10 82       	st	Z, r1
     6e6:	08 95       	ret

000006e8 <_ZN10Ringbuffer7isEmptyEv>:
 *
 * \brief Abfrage ob noch Zeichen im Buffer sind
 * \return true = keine Zeichen mehr im Buffer
 ************************************************************************/
bool Ringbuffer::isEmpty(void){
	if(schreibePos == lesePos)
     6e8:	dc 01       	movw	r26, r24
     6ea:	a0 57       	subi	r26, 0x70	; 112
     6ec:	be 4f       	sbci	r27, 0xFE	; 254
     6ee:	fc 01       	movw	r30, r24
     6f0:	ee 56       	subi	r30, 0x6E	; 110
     6f2:	fe 4f       	sbci	r31, 0xFE	; 254
     6f4:	81 e0       	ldi	r24, 0x01	; 1
     6f6:	4d 91       	ld	r20, X+
     6f8:	5c 91       	ld	r21, X
     6fa:	20 81       	ld	r18, Z
     6fc:	31 81       	ldd	r19, Z+1	; 0x01
     6fe:	42 17       	cp	r20, r18
     700:	53 07       	cpc	r21, r19
     702:	09 f0       	breq	.+2      	; 0x706 <_ZN10Ringbuffer7isEmptyEv+0x1e>
     704:	80 e0       	ldi	r24, 0x00	; 0
		return true;
	return false;	
}
     706:	08 95       	ret

00000708 <_ZN10Ringbuffer6isFullEv>:
 *
 * \brief Abfrage ob Buffer Voll
 * \return true = kein Platz fuer weitere Zeichen
 ************************************************************************/
bool Ringbuffer::isFull(void){
	int tempSchreibePos = schreibePos;
     708:	fc 01       	movw	r30, r24
     70a:	e0 57       	subi	r30, 0x70	; 112
     70c:	fe 4f       	sbci	r31, 0xFE	; 254
     70e:	80 81       	ld	r24, Z
     710:	91 81       	ldd	r25, Z+1	; 0x01
	tempSchreibePos++;
     712:	01 96       	adiw	r24, 0x01	; 1
     714:	60 e9       	ldi	r22, 0x90	; 144
     716:	71 e0       	ldi	r23, 0x01	; 1
     718:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__divmodhi4>
     71c:	ac 01       	movw	r20, r24
	tempSchreibePos %= n;
	if(tempSchreibePos == lesePos)
     71e:	32 96       	adiw	r30, 0x02	; 2
     720:	81 e0       	ldi	r24, 0x01	; 1
     722:	20 81       	ld	r18, Z
     724:	31 81       	ldd	r19, Z+1	; 0x01
     726:	42 17       	cp	r20, r18
     728:	53 07       	cpc	r21, r19
     72a:	09 f0       	breq	.+2      	; 0x72e <_ZN10Ringbuffer6isFullEv+0x26>
     72c:	80 e0       	ldi	r24, 0x00	; 0
		return true;
	return false;	
}
     72e:	08 95       	ret

00000730 <_ZN10Ringbuffer4pushEc>:
 * \author Frank Tobergte
 *
 * \brief  Ein Zeichen in den Buffer legen
 * \param daten Das Zeichen, welches in den Buffer gelegt wird
 ************************************************************************/
void Ringbuffer::push(char daten){
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	ec 01       	movw	r28, r24
     738:	16 2f       	mov	r17, r22
	if(!isFull()){
     73a:	0e 94 84 03 	call	0x708	; 0x708 <_ZN10Ringbuffer6isFullEv>
     73e:	81 11       	cpse	r24, r1
     740:	0f c0       	rjmp	.+30     	; 0x760 <_ZN10Ringbuffer4pushEc+0x30>
		speicher[schreibePos] = daten;
     742:	fe 01       	movw	r30, r28
     744:	e0 57       	subi	r30, 0x70	; 112
     746:	fe 4f       	sbci	r31, 0xFE	; 254
     748:	80 81       	ld	r24, Z
     74a:	91 81       	ldd	r25, Z+1	; 0x01
     74c:	c8 0f       	add	r28, r24
     74e:	d9 1f       	adc	r29, r25
     750:	18 83       	st	Y, r17
		schreibePos++;
		schreibePos %= n;
     752:	01 96       	adiw	r24, 0x01	; 1
     754:	60 e9       	ldi	r22, 0x90	; 144
     756:	71 e0       	ldi	r23, 0x01	; 1
     758:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__divmodhi4>
     75c:	91 83       	std	Z+1, r25	; 0x01
     75e:	80 83       	st	Z, r24
	}
}
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	1f 91       	pop	r17
     766:	08 95       	ret

00000768 <_ZN10Ringbuffer3popEv>:
 *
 * \brief Abfrage ob noch Zeichen im Buffer sind
 * \return true = keine Zeichen mehr im Buffer
 ************************************************************************/
bool Ringbuffer::isEmpty(void){
	if(schreibePos == lesePos)
     768:	fc 01       	movw	r30, r24
     76a:	ee 56       	subi	r30, 0x6E	; 110
     76c:	fe 4f       	sbci	r31, 0xFE	; 254
     76e:	20 81       	ld	r18, Z
     770:	31 81       	ldd	r19, Z+1	; 0x01
     772:	32 97       	sbiw	r30, 0x02	; 2
 * \brief Ein Zeichen aus den Buffer holen
 * \return 0 wenn kein Zeichen mehr vorhanden
 ************************************************************************/
char Ringbuffer::pop(void){
	char ausgabe = 0;
	if(!isEmpty()){
     774:	40 81       	ld	r20, Z
     776:	51 81       	ldd	r21, Z+1	; 0x01
     778:	42 17       	cp	r20, r18
     77a:	53 07       	cpc	r21, r19
     77c:	81 f0       	breq	.+32     	; 0x79e <_ZN10Ringbuffer3popEv+0x36>
		ausgabe = speicher[lesePos];
     77e:	fc 01       	movw	r30, r24
     780:	e2 0f       	add	r30, r18
     782:	f3 1f       	adc	r31, r19
     784:	40 81       	ld	r20, Z
		lesePos++;
		lesePos %= n;
     786:	fc 01       	movw	r30, r24
     788:	ee 56       	subi	r30, 0x6E	; 110
     78a:	fe 4f       	sbci	r31, 0xFE	; 254
     78c:	c9 01       	movw	r24, r18
     78e:	01 96       	adiw	r24, 0x01	; 1
     790:	60 e9       	ldi	r22, 0x90	; 144
     792:	71 e0       	ldi	r23, 0x01	; 1
     794:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__divmodhi4>
     798:	91 83       	std	Z+1, r25	; 0x01
     79a:	80 83       	st	Z, r24
     79c:	01 c0       	rjmp	.+2      	; 0x7a0 <_ZN10Ringbuffer3popEv+0x38>
 *
 * \brief Ein Zeichen aus den Buffer holen
 * \return 0 wenn kein Zeichen mehr vorhanden
 ************************************************************************/
char Ringbuffer::pop(void){
	char ausgabe = 0;
     79e:	40 e0       	ldi	r20, 0x00	; 0
		lesePos++;
		lesePos %= n;
	}
	return ausgabe;
	
}
     7a0:	84 2f       	mov	r24, r20
     7a2:	08 95       	ret

000007a4 <_ZN12Schrittmotor5SpeedEf>:
* \return Gesamt Pulse pro Umdrehung
*
************************************************************************/
unsigned long Schrittmotor::GetPulseProUmdrehung(){
	return (unsigned long)microstepPulse * (unsigned long)motorPulseProUmdrehung;
}
     7a4:	fc 01       	movw	r30, r24
     7a6:	96 81       	ldd	r25, Z+6	; 0x06
     7a8:	91 50       	subi	r25, 0x01	; 1
     7aa:	92 30       	cpi	r25, 0x02	; 2
     7ac:	40 f4       	brcc	.+16     	; 0x7be <_ZN12Schrittmotor5SpeedEf+0x1a>
     7ae:	47 83       	std	Z+7, r20	; 0x07
     7b0:	50 87       	std	Z+8, r21	; 0x08
     7b2:	61 87       	std	Z+9, r22	; 0x09
     7b4:	72 87       	std	Z+10, r23	; 0x0a
     7b6:	82 e0       	ldi	r24, 0x02	; 2
     7b8:	86 83       	std	Z+6, r24	; 0x06
     7ba:	81 e0       	ldi	r24, 0x01	; 1
     7bc:	08 95       	ret
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	08 95       	ret

000007c2 <_ZN12Schrittmotor19UmdrehungenOhneZeitEf>:
     7c2:	0f 93       	push	r16
     7c4:	1f 93       	push	r17
     7c6:	dc 01       	movw	r26, r24
     7c8:	ed 91       	ld	r30, X+
     7ca:	fc 91       	ld	r31, X
     7cc:	06 80       	ldd	r0, Z+6	; 0x06
     7ce:	f7 81       	ldd	r31, Z+7	; 0x07
     7d0:	e0 2d       	mov	r30, r0
     7d2:	00 e0       	ldi	r16, 0x00	; 0
     7d4:	10 e0       	ldi	r17, 0x00	; 0
     7d6:	20 e2       	ldi	r18, 0x20	; 32
     7d8:	31 e4       	ldi	r19, 0x41	; 65
     7da:	09 95       	icall
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	08 95       	ret

000007e2 <_ZN12Schrittmotor5PowerEb>:
     7e2:	fc 01       	movw	r30, r24
     7e4:	96 81       	ldd	r25, Z+6	; 0x06
     7e6:	99 23       	and	r25, r25
     7e8:	19 f0       	breq	.+6      	; 0x7f0 <_ZN12Schrittmotor5PowerEb+0xe>
     7ea:	91 30       	cpi	r25, 0x01	; 1
     7ec:	49 f0       	breq	.+18     	; 0x800 <_ZN12Schrittmotor5PowerEb+0x1e>
     7ee:	10 c0       	rjmp	.+32     	; 0x810 <_ZN12Schrittmotor5PowerEb+0x2e>
     7f0:	66 23       	and	r22, r22
     7f2:	81 f0       	breq	.+32     	; 0x814 <_ZN12Schrittmotor5PowerEb+0x32>
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	86 83       	std	Z+6, r24	; 0x06
     7f8:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN5InOut5PowerEb>
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	08 95       	ret
     800:	61 11       	cpse	r22, r1
     802:	0a c0       	rjmp	.+20     	; 0x818 <_ZN12Schrittmotor5PowerEb+0x36>
     804:	16 82       	std	Z+6, r1	; 0x06
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	0e 94 c0 02 	call	0x580	; 0x580 <_ZN5InOut5PowerEb>
     80c:	81 e0       	ldi	r24, 0x01	; 1
     80e:	08 95       	ret
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	08 95       	ret
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	08 95       	ret
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	08 95       	ret

0000081c <_ZN12SchrittmotorC1Ev>:
     81c:	cf 93       	push	r28
     81e:	df 93       	push	r29
     820:	fc 01       	movw	r30, r24
     822:	81 e5       	ldi	r24, 0x51	; 81
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	91 83       	std	Z+1, r25	; 0x01
     828:	80 83       	st	Z, r24
     82a:	f0 93 5b 01 	sts	0x015B, r31	; 0x80015b <__data_end+0x1>
     82e:	e0 93 5a 01 	sts	0x015A, r30	; 0x80015a <__data_end>
     832:	88 ec       	ldi	r24, 0xC8	; 200
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	93 83       	std	Z+3, r25	; 0x03
     838:	82 83       	std	Z+2, r24	; 0x02
     83a:	80 e2       	ldi	r24, 0x20	; 32
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	95 83       	std	Z+5, r25	; 0x05
     840:	84 83       	std	Z+4, r24	; 0x04
     842:	16 82       	std	Z+6, r1	; 0x06
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	a0 e7       	ldi	r26, 0x70	; 112
     84a:	b1 e4       	ldi	r27, 0x41	; 65
     84c:	87 87       	std	Z+15, r24	; 0x0f
     84e:	90 8b       	std	Z+16, r25	; 0x10
     850:	a1 8b       	std	Z+17, r26	; 0x11
     852:	b2 8b       	std	Z+18, r27	; 0x12
     854:	40 e0       	ldi	r20, 0x00	; 0
     856:	50 e0       	ldi	r21, 0x00	; 0
     858:	60 ef       	ldi	r22, 0xF0	; 240
     85a:	71 e4       	ldi	r23, 0x41	; 65
     85c:	43 8b       	std	Z+19, r20	; 0x13
     85e:	54 8b       	std	Z+20, r21	; 0x14
     860:	65 8b       	std	Z+21, r22	; 0x15
     862:	76 8b       	std	Z+22, r23	; 0x16
     864:	13 86       	std	Z+11, r1	; 0x0b
     866:	14 86       	std	Z+12, r1	; 0x0c
     868:	15 86       	std	Z+13, r1	; 0x0d
     86a:	16 86       	std	Z+14, r1	; 0x0e
     86c:	17 82       	std	Z+7, r1	; 0x07
     86e:	10 86       	std	Z+8, r1	; 0x08
     870:	11 86       	std	Z+9, r1	; 0x09
     872:	12 86       	std	Z+10, r1	; 0x0a
     874:	40 e0       	ldi	r20, 0x00	; 0
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	60 e8       	ldi	r22, 0x80	; 128
     87a:	7f e3       	ldi	r23, 0x3F	; 63
     87c:	43 8f       	std	Z+27, r20	; 0x1b
     87e:	54 8f       	std	Z+28, r21	; 0x1c
     880:	65 8f       	std	Z+29, r22	; 0x1d
     882:	76 8f       	std	Z+30, r23	; 0x1e
     884:	40 e0       	ldi	r20, 0x00	; 0
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	60 e0       	ldi	r22, 0x00	; 0
     88a:	7f e3       	ldi	r23, 0x3F	; 63
     88c:	47 8b       	std	Z+23, r20	; 0x17
     88e:	50 8f       	std	Z+24, r21	; 0x18
     890:	61 8f       	std	Z+25, r22	; 0x19
     892:	72 8f       	std	Z+26, r23	; 0x1a
     894:	ef 01       	movw	r28, r30
     896:	ef 96       	adiw	r28, 0x3f	; 63
     898:	4a e0       	ldi	r20, 0x0A	; 10
     89a:	57 ed       	ldi	r21, 0xD7	; 215
     89c:	63 e2       	ldi	r22, 0x23	; 35
     89e:	7c e3       	ldi	r23, 0x3C	; 60
     8a0:	48 83       	st	Y, r20
     8a2:	59 83       	std	Y+1, r21	; 0x01
     8a4:	6a 83       	std	Y+2, r22	; 0x02
     8a6:	7b 83       	std	Y+3, r23	; 0x03
     8a8:	ed 5b       	subi	r30, 0xBD	; 189
     8aa:	ff 4f       	sbci	r31, 0xFF	; 255
     8ac:	80 83       	st	Z, r24
     8ae:	91 83       	std	Z+1, r25	; 0x01
     8b0:	a2 83       	std	Z+2, r26	; 0x02
     8b2:	b3 83       	std	Z+3, r27	; 0x03
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	08 95       	ret

000008ba <_ZN12Schrittmotor25SetSpeedFloatAutoRichtungEf>:
     8ba:	cf 92       	push	r12
     8bc:	df 92       	push	r13
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	ec 01       	movw	r28, r24
     8c8:	6a 01       	movw	r12, r20
     8ca:	7b 01       	movw	r14, r22
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	a9 01       	movw	r20, r18
     8d2:	c7 01       	movw	r24, r14
     8d4:	b6 01       	movw	r22, r12
     8d6:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__gesf2>
     8da:	88 23       	and	r24, r24
     8dc:	a4 f0       	brlt	.+40     	; 0x906 <__stack+0x7>
     8de:	80 e0       	ldi	r24, 0x00	; 0
     8e0:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN5InOut8RichtungEb>
     8e4:	2c 81       	ldd	r18, Y+4	; 0x04
     8e6:	3d 81       	ldd	r19, Y+5	; 0x05
     8e8:	aa 81       	ldd	r26, Y+2	; 0x02
     8ea:	bb 81       	ldd	r27, Y+3	; 0x03
     8ec:	0e 94 ef 0c 	call	0x19de	; 0x19de <__umulhisi3>
     8f0:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__floatunsisf>
     8f4:	a7 01       	movw	r20, r14
     8f6:	96 01       	movw	r18, r12
     8f8:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
     8fc:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__fixunssfsi>
     900:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN5InOut5SpeedEm>
     904:	14 c0       	rjmp	.+40     	; 0x92e <__stack+0x2f>
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN5InOut8RichtungEb>
     90c:	2c 81       	ldd	r18, Y+4	; 0x04
     90e:	3d 81       	ldd	r19, Y+5	; 0x05
     910:	aa 81       	ldd	r26, Y+2	; 0x02
     912:	bb 81       	ldd	r27, Y+3	; 0x03
     914:	0e 94 ef 0c 	call	0x19de	; 0x19de <__umulhisi3>
     918:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__floatunsisf>
     91c:	a7 01       	movw	r20, r14
     91e:	96 01       	movw	r18, r12
     920:	50 58       	subi	r21, 0x80	; 128
     922:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
     926:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__fixunssfsi>
     92a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN5InOut5SpeedEm>
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	ff 90       	pop	r15
     934:	ef 90       	pop	r14
     936:	df 90       	pop	r13
     938:	cf 90       	pop	r12
     93a:	08 95       	ret

0000093c <_ZN12Schrittmotor25SetSpeedFloatOhneRichtungEf>:
     93c:	cf 92       	push	r12
     93e:	df 92       	push	r13
     940:	ef 92       	push	r14
     942:	ff 92       	push	r15
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	ec 01       	movw	r28, r24
     94a:	6a 01       	movw	r12, r20
     94c:	7b 01       	movw	r14, r22
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	a9 01       	movw	r20, r18
     954:	c7 01       	movw	r24, r14
     956:	b6 01       	movw	r22, r12
     958:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__gesf2>
     95c:	88 23       	and	r24, r24
     95e:	8c f0       	brlt	.+34     	; 0x982 <_ZN12Schrittmotor25SetSpeedFloatOhneRichtungEf+0x46>
     960:	2c 81       	ldd	r18, Y+4	; 0x04
     962:	3d 81       	ldd	r19, Y+5	; 0x05
     964:	aa 81       	ldd	r26, Y+2	; 0x02
     966:	bb 81       	ldd	r27, Y+3	; 0x03
     968:	0e 94 ef 0c 	call	0x19de	; 0x19de <__umulhisi3>
     96c:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__floatunsisf>
     970:	a7 01       	movw	r20, r14
     972:	96 01       	movw	r18, r12
     974:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
     978:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__fixunssfsi>
     97c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN5InOut5SpeedEm>
     980:	11 c0       	rjmp	.+34     	; 0x9a4 <_ZN12Schrittmotor25SetSpeedFloatOhneRichtungEf+0x68>
     982:	2c 81       	ldd	r18, Y+4	; 0x04
     984:	3d 81       	ldd	r19, Y+5	; 0x05
     986:	aa 81       	ldd	r26, Y+2	; 0x02
     988:	bb 81       	ldd	r27, Y+3	; 0x03
     98a:	0e 94 ef 0c 	call	0x19de	; 0x19de <__umulhisi3>
     98e:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__floatunsisf>
     992:	a7 01       	movw	r20, r14
     994:	96 01       	movw	r18, r12
     996:	50 58       	subi	r21, 0x80	; 128
     998:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
     99c:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__fixunssfsi>
     9a0:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_ZN5InOut5SpeedEm>
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	df 90       	pop	r13
     9ae:	cf 90       	pop	r12
     9b0:	08 95       	ret

000009b2 <_ZN12Schrittmotor15TickDauerhaftAnEf>:
 * \author Frank Tobergte
 *
 * \brief Ablaufsteuerung fuer dauerhaft eingeschaltet
 * \param sekunden Abstand der Aufrufe in sekunden
 ************************************************************************/
void Schrittmotor::TickDauerhaftAn(float sekunden){
     9b2:	2f 92       	push	r2
     9b4:	3f 92       	push	r3
     9b6:	4f 92       	push	r4
     9b8:	5f 92       	push	r5
     9ba:	6f 92       	push	r6
     9bc:	7f 92       	push	r7
     9be:	8f 92       	push	r8
     9c0:	9f 92       	push	r9
     9c2:	af 92       	push	r10
     9c4:	bf 92       	push	r11
     9c6:	cf 92       	push	r12
     9c8:	df 92       	push	r13
     9ca:	ef 92       	push	r14
     9cc:	ff 92       	push	r15
     9ce:	0f 93       	push	r16
     9d0:	1f 93       	push	r17
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	00 d0       	rcall	.+0      	; 0x9d8 <_ZN12Schrittmotor15TickDauerhaftAnEf+0x26>
     9d8:	00 d0       	rcall	.+0      	; 0x9da <_ZN12Schrittmotor15TickDauerhaftAnEf+0x28>
     9da:	00 d0       	rcall	.+0      	; 0x9dc <_ZN12Schrittmotor15TickDauerhaftAnEf+0x2a>
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
     9e0:	9e 83       	std	Y+6, r25	; 0x06
     9e2:	8d 83       	std	Y+5, r24	; 0x05
     9e4:	4a 01       	movw	r8, r20
     9e6:	5b 01       	movw	r10, r22
	float neuUps;
	float sollUpsLocal;
	float istUpsLocal;
	bool umkr;

	istUpsLocal = istUps;
     9e8:	fc 01       	movw	r30, r24
     9ea:	c3 84       	ldd	r12, Z+11	; 0x0b
     9ec:	d4 84       	ldd	r13, Z+12	; 0x0c
     9ee:	e5 84       	ldd	r14, Z+13	; 0x0d
     9f0:	f6 84       	ldd	r15, Z+14	; 0x0e
	sollUpsLocal = sollUps;
     9f2:	17 81       	ldd	r17, Z+7	; 0x07
     9f4:	00 85       	ldd	r16, Z+8	; 0x08
     9f6:	31 84       	ldd	r3, Z+9	; 0x09
     9f8:	22 84       	ldd	r2, Z+10	; 0x0a

	maxBeschleunigungLocal = maxBeschleunigung * sekunden;
     9fa:	27 85       	ldd	r18, Z+15	; 0x0f
     9fc:	30 89       	ldd	r19, Z+16	; 0x10
     9fe:	41 89       	ldd	r20, Z+17	; 0x11
     a00:	52 89       	ldd	r21, Z+18	; 0x12
     a02:	c5 01       	movw	r24, r10
     a04:	b4 01       	movw	r22, r8
     a06:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
     a0a:	2b 01       	movw	r4, r22
     a0c:	3c 01       	movw	r6, r24
	maxBremsenLocal = maxBremsen * sekunden;
     a0e:	ed 81       	ldd	r30, Y+5	; 0x05
     a10:	fe 81       	ldd	r31, Y+6	; 0x06
     a12:	23 89       	ldd	r18, Z+19	; 0x13
     a14:	34 89       	ldd	r19, Z+20	; 0x14
     a16:	45 89       	ldd	r20, Z+21	; 0x15
     a18:	56 89       	ldd	r21, Z+22	; 0x16
     a1a:	c5 01       	movw	r24, r10
     a1c:	b4 01       	movw	r22, r8
     a1e:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
     a22:	4b 01       	movw	r8, r22
     a24:	5c 01       	movw	r10, r24
	umkr = true;
	else
	umkr = false;

	neuUps = sollUpsLocal;
	delta = neuUps - istUpsLocal;
     a26:	a7 01       	movw	r20, r14
     a28:	96 01       	movw	r18, r12
     a2a:	61 2f       	mov	r22, r17
     a2c:	70 2f       	mov	r23, r16
     a2e:	83 2d       	mov	r24, r3
     a30:	92 2d       	mov	r25, r2
     a32:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__subsf3>
     a36:	69 83       	std	Y+1, r22	; 0x01
     a38:	7a 83       	std	Y+2, r23	; 0x02
     a3a:	8b 83       	std	Y+3, r24	; 0x03
     a3c:	9c 83       	std	Y+4, r25	; 0x04
	if(umkr){
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	a9 01       	movw	r20, r18
     a44:	c7 01       	movw	r24, r14
     a46:	b6 01       	movw	r22, r12
     a48:	0e 94 bd 0a 	call	0x157a	; 0x157a <__cmpsf2>
     a4c:	88 23       	and	r24, r24
     a4e:	7c f5       	brge	.+94     	; 0xaae <_ZN12Schrittmotor15TickDauerhaftAnEf+0xfc>
		if(delta <- maxBeschleunigungLocal)
     a50:	a3 01       	movw	r20, r6
     a52:	92 01       	movw	r18, r4
     a54:	50 58       	subi	r21, 0x80	; 128
     a56:	69 81       	ldd	r22, Y+1	; 0x01
     a58:	7a 81       	ldd	r23, Y+2	; 0x02
     a5a:	8b 81       	ldd	r24, Y+3	; 0x03
     a5c:	9c 81       	ldd	r25, Y+4	; 0x04
     a5e:	0e 94 bd 0a 	call	0x157a	; 0x157a <__cmpsf2>
     a62:	88 23       	and	r24, r24
     a64:	5c f4       	brge	.+22     	; 0xa7c <_ZN12Schrittmotor15TickDauerhaftAnEf+0xca>
		neuUps = istUpsLocal - maxBeschleunigungLocal;
     a66:	a3 01       	movw	r20, r6
     a68:	92 01       	movw	r18, r4
     a6a:	c7 01       	movw	r24, r14
     a6c:	b6 01       	movw	r22, r12
     a6e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__subsf3>
     a72:	76 2e       	mov	r7, r22
     a74:	67 2e       	mov	r6, r23
     a76:	58 2e       	mov	r5, r24
     a78:	49 2e       	mov	r4, r25
     a7a:	04 c0       	rjmp	.+8      	; 0xa84 <_ZN12Schrittmotor15TickDauerhaftAnEf+0xd2>
	if(istUpsLocal < 0)
	umkr = true;
	else
	umkr = false;

	neuUps = sollUpsLocal;
     a7c:	71 2e       	mov	r7, r17
     a7e:	60 2e       	mov	r6, r16
     a80:	53 2c       	mov	r5, r3
     a82:	42 2c       	mov	r4, r2
	delta = neuUps - istUpsLocal;
	if(umkr){
		if(delta <- maxBeschleunigungLocal)
		neuUps = istUpsLocal - maxBeschleunigungLocal;
		if(delta > maxBremsenLocal)
     a84:	29 81       	ldd	r18, Y+1	; 0x01
     a86:	3a 81       	ldd	r19, Y+2	; 0x02
     a88:	4b 81       	ldd	r20, Y+3	; 0x03
     a8a:	5c 81       	ldd	r21, Y+4	; 0x04
     a8c:	c5 01       	movw	r24, r10
     a8e:	b4 01       	movw	r22, r8
     a90:	0e 94 bd 0a 	call	0x157a	; 0x157a <__cmpsf2>
     a94:	88 23       	and	r24, r24
     a96:	cc f5       	brge	.+114    	; 0xb0a <_ZN12Schrittmotor15TickDauerhaftAnEf+0x158>
		neuUps = istUpsLocal + maxBremsenLocal;
     a98:	a5 01       	movw	r20, r10
     a9a:	94 01       	movw	r18, r8
     a9c:	c7 01       	movw	r24, r14
     a9e:	b6 01       	movw	r22, r12
     aa0:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     aa4:	76 2e       	mov	r7, r22
     aa6:	67 2e       	mov	r6, r23
     aa8:	58 2e       	mov	r5, r24
     aaa:	49 2e       	mov	r4, r25
     aac:	2e c0       	rjmp	.+92     	; 0xb0a <_ZN12Schrittmotor15TickDauerhaftAnEf+0x158>

		}else{
		if(delta > maxBeschleunigungLocal)
     aae:	29 81       	ldd	r18, Y+1	; 0x01
     ab0:	3a 81       	ldd	r19, Y+2	; 0x02
     ab2:	4b 81       	ldd	r20, Y+3	; 0x03
     ab4:	5c 81       	ldd	r21, Y+4	; 0x04
     ab6:	c3 01       	movw	r24, r6
     ab8:	b2 01       	movw	r22, r4
     aba:	0e 94 bd 0a 	call	0x157a	; 0x157a <__cmpsf2>
     abe:	88 23       	and	r24, r24
     ac0:	5c f4       	brge	.+22     	; 0xad8 <_ZN12Schrittmotor15TickDauerhaftAnEf+0x126>
		neuUps = istUpsLocal + maxBeschleunigungLocal;
     ac2:	a3 01       	movw	r20, r6
     ac4:	92 01       	movw	r18, r4
     ac6:	c7 01       	movw	r24, r14
     ac8:	b6 01       	movw	r22, r12
     aca:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     ace:	76 2e       	mov	r7, r22
     ad0:	67 2e       	mov	r6, r23
     ad2:	58 2e       	mov	r5, r24
     ad4:	49 2e       	mov	r4, r25
     ad6:	04 c0       	rjmp	.+8      	; 0xae0 <_ZN12Schrittmotor15TickDauerhaftAnEf+0x12e>
	if(istUpsLocal < 0)
	umkr = true;
	else
	umkr = false;

	neuUps = sollUpsLocal;
     ad8:	71 2e       	mov	r7, r17
     ada:	60 2e       	mov	r6, r16
     adc:	53 2c       	mov	r5, r3
     ade:	42 2c       	mov	r4, r2
		neuUps = istUpsLocal + maxBremsenLocal;

		}else{
		if(delta > maxBeschleunigungLocal)
		neuUps = istUpsLocal + maxBeschleunigungLocal;
		if(delta < -maxBremsenLocal)
     ae0:	a5 01       	movw	r20, r10
     ae2:	94 01       	movw	r18, r8
     ae4:	50 58       	subi	r21, 0x80	; 128
     ae6:	69 81       	ldd	r22, Y+1	; 0x01
     ae8:	7a 81       	ldd	r23, Y+2	; 0x02
     aea:	8b 81       	ldd	r24, Y+3	; 0x03
     aec:	9c 81       	ldd	r25, Y+4	; 0x04
     aee:	0e 94 bd 0a 	call	0x157a	; 0x157a <__cmpsf2>
     af2:	88 23       	and	r24, r24
     af4:	54 f4       	brge	.+20     	; 0xb0a <_ZN12Schrittmotor15TickDauerhaftAnEf+0x158>
		neuUps = istUpsLocal - maxBremsenLocal;
     af6:	a5 01       	movw	r20, r10
     af8:	94 01       	movw	r18, r8
     afa:	c7 01       	movw	r24, r14
     afc:	b6 01       	movw	r22, r12
     afe:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__subsf3>
     b02:	76 2e       	mov	r7, r22
     b04:	67 2e       	mov	r6, r23
     b06:	58 2e       	mov	r5, r24
     b08:	49 2e       	mov	r4, r25
	}
	istUpsLocal = neuUps;
	SetSpeedFloatAutoRichtung(istUpsLocal);
     b0a:	47 2d       	mov	r20, r7
     b0c:	56 2d       	mov	r21, r6
     b0e:	65 2d       	mov	r22, r5
     b10:	74 2d       	mov	r23, r4
     b12:	8d 81       	ldd	r24, Y+5	; 0x05
     b14:	9e 81       	ldd	r25, Y+6	; 0x06
     b16:	0e 94 5d 04 	call	0x8ba	; 0x8ba <_ZN12Schrittmotor25SetSpeedFloatAutoRichtungEf>
	istUps = istUpsLocal;
     b1a:	87 2d       	mov	r24, r7
     b1c:	96 2d       	mov	r25, r6
     b1e:	a5 2d       	mov	r26, r5
     b20:	b4 2d       	mov	r27, r4
     b22:	ed 81       	ldd	r30, Y+5	; 0x05
     b24:	fe 81       	ldd	r31, Y+6	; 0x06
     b26:	83 87       	std	Z+11, r24	; 0x0b
     b28:	94 87       	std	Z+12, r25	; 0x0c
     b2a:	a5 87       	std	Z+13, r26	; 0x0d
     b2c:	b6 87       	std	Z+14, r27	; 0x0e
	switch(modus){
     b2e:	86 81       	ldd	r24, Z+6	; 0x06
     b30:	82 30       	cpi	r24, 0x02	; 2
     b32:	f1 f4       	brne	.+60     	; 0xb70 <_ZN12Schrittmotor15TickDauerhaftAnEf+0x1be>
		case dauerhaftAn:
		if((istUpsLocal == 0) && (sollUpsLocal == 0)){
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	a9 01       	movw	r20, r18
     b3a:	67 2d       	mov	r22, r7
     b3c:	76 2d       	mov	r23, r6
     b3e:	85 2d       	mov	r24, r5
     b40:	94 2d       	mov	r25, r4
     b42:	0e 94 bd 0a 	call	0x157a	; 0x157a <__cmpsf2>
     b46:	81 11       	cpse	r24, r1
     b48:	13 c0       	rjmp	.+38     	; 0xb70 <_ZN12Schrittmotor15TickDauerhaftAnEf+0x1be>
     b4a:	20 e0       	ldi	r18, 0x00	; 0
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	a9 01       	movw	r20, r18
     b50:	61 2f       	mov	r22, r17
     b52:	70 2f       	mov	r23, r16
     b54:	83 2d       	mov	r24, r3
     b56:	92 2d       	mov	r25, r2
     b58:	0e 94 bd 0a 	call	0x157a	; 0x157a <__cmpsf2>
     b5c:	81 11       	cpse	r24, r1
     b5e:	08 c0       	rjmp	.+16     	; 0xb70 <_ZN12Schrittmotor15TickDauerhaftAnEf+0x1be>
			modus = powerOn;
     b60:	81 e0       	ldi	r24, 0x01	; 1
     b62:	ed 81       	ldd	r30, Y+5	; 0x05
     b64:	fe 81       	ldd	r31, Y+6	; 0x06
     b66:	86 83       	std	Z+6, r24	; 0x06
			Usart0::sende(" --> Steht\r\n>: ");
     b68:	8d e3       	ldi	r24, 0x3D	; 61
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN6Usart05sendeEPKc>
		break;

		default:
		break;
	}
}
     b70:	26 96       	adiw	r28, 0x06	; 6
     b72:	0f b6       	in	r0, 0x3f	; 63
     b74:	f8 94       	cli
     b76:	de bf       	out	0x3e, r29	; 62
     b78:	0f be       	out	0x3f, r0	; 63
     b7a:	cd bf       	out	0x3d, r28	; 61
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	df 90       	pop	r13
     b8a:	cf 90       	pop	r12
     b8c:	bf 90       	pop	r11
     b8e:	af 90       	pop	r10
     b90:	9f 90       	pop	r9
     b92:	8f 90       	pop	r8
     b94:	7f 90       	pop	r7
     b96:	6f 90       	pop	r6
     b98:	5f 90       	pop	r5
     b9a:	4f 90       	pop	r4
     b9c:	3f 90       	pop	r3
     b9e:	2f 90       	pop	r2
     ba0:	08 95       	ret

00000ba2 <_ZN12Schrittmotor13TickRampeHochEf>:

void Schrittmotor::TickRampeHoch(float sekunden){
     ba2:	8f 92       	push	r8
     ba4:	9f 92       	push	r9
     ba6:	af 92       	push	r10
     ba8:	bf 92       	push	r11
     baa:	cf 92       	push	r12
     bac:	df 92       	push	r13
     bae:	ef 92       	push	r14
     bb0:	ff 92       	push	r15
     bb2:	cf 93       	push	r28
     bb4:	df 93       	push	r29
     bb6:	ec 01       	movw	r28, r24
     bb8:	4a 01       	movw	r8, r20
     bba:	5b 01       	movw	r10, r22
	if(zeitSeitAnlauf < zeitBeschl){
     bbc:	cb a0       	ldd	r12, Y+35	; 0x23
     bbe:	dc a0       	ldd	r13, Y+36	; 0x24
     bc0:	ed a0       	ldd	r14, Y+37	; 0x25
     bc2:	fe a0       	ldd	r15, Y+38	; 0x26
     bc4:	a7 01       	movw	r20, r14
     bc6:	96 01       	movw	r18, r12
     bc8:	6b ad       	ldd	r22, Y+59	; 0x3b
     bca:	7c ad       	ldd	r23, Y+60	; 0x3c
     bcc:	8d ad       	ldd	r24, Y+61	; 0x3d
     bce:	9e ad       	ldd	r25, Y+62	; 0x3e
     bd0:	0e 94 bd 0a 	call	0x157a	; 0x157a <__cmpsf2>
     bd4:	88 23       	and	r24, r24
     bd6:	84 f5       	brge	.+96     	; 0xc38 <_ZN12Schrittmotor13TickRampeHochEf+0x96>
		rampeSpeedUPS += sollUps * sekunden / zeitBeschl;
     bd8:	2f 81       	ldd	r18, Y+7	; 0x07
     bda:	38 85       	ldd	r19, Y+8	; 0x08
     bdc:	49 85       	ldd	r20, Y+9	; 0x09
     bde:	5a 85       	ldd	r21, Y+10	; 0x0a
     be0:	c5 01       	movw	r24, r10
     be2:	b4 01       	movw	r22, r8
     be4:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
     be8:	a7 01       	movw	r20, r14
     bea:	96 01       	movw	r18, r12
     bec:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__divsf3>
     bf0:	2f a9       	ldd	r18, Y+55	; 0x37
     bf2:	38 ad       	ldd	r19, Y+56	; 0x38
     bf4:	49 ad       	ldd	r20, Y+57	; 0x39
     bf6:	5a ad       	ldd	r21, Y+58	; 0x3a
     bf8:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     bfc:	6b 01       	movw	r12, r22
     bfe:	7c 01       	movw	r14, r24
     c00:	6f ab       	std	Y+55, r22	; 0x37
     c02:	78 af       	std	Y+56, r23	; 0x38
     c04:	89 af       	std	Y+57, r24	; 0x39
     c06:	9a af       	std	Y+58, r25	; 0x3a
		if(rampeSpeedUPS < minimalSpeed)
     c08:	fe 01       	movw	r30, r28
     c0a:	ff 96       	adiw	r30, 0x3f	; 63
     c0c:	80 80       	ld	r8, Z
     c0e:	91 80       	ldd	r9, Z+1	; 0x01
     c10:	a2 80       	ldd	r10, Z+2	; 0x02
     c12:	b3 80       	ldd	r11, Z+3	; 0x03
     c14:	a5 01       	movw	r20, r10
     c16:	94 01       	movw	r18, r8
     c18:	0e 94 bd 0a 	call	0x157a	; 0x157a <__cmpsf2>
     c1c:	88 23       	and	r24, r24
     c1e:	34 f4       	brge	.+12     	; 0xc2c <_ZN12Schrittmotor13TickRampeHochEf+0x8a>
			SetSpeedFloatOhneRichtung(minimalSpeed);
     c20:	b5 01       	movw	r22, r10
     c22:	a4 01       	movw	r20, r8
     c24:	ce 01       	movw	r24, r28
     c26:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN12Schrittmotor25SetSpeedFloatOhneRichtungEf>
     c2a:	0f c0       	rjmp	.+30     	; 0xc4a <_ZN12Schrittmotor13TickRampeHochEf+0xa8>
		else
			SetSpeedFloatOhneRichtung(rampeSpeedUPS);
     c2c:	b7 01       	movw	r22, r14
     c2e:	a6 01       	movw	r20, r12
     c30:	ce 01       	movw	r24, r28
     c32:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN12Schrittmotor25SetSpeedFloatOhneRichtungEf>
     c36:	09 c0       	rjmp	.+18     	; 0xc4a <_ZN12Schrittmotor13TickRampeHochEf+0xa8>
	}else{
		SetSpeedFloatOhneRichtung(sollUps);
     c38:	4f 81       	ldd	r20, Y+7	; 0x07
     c3a:	58 85       	ldd	r21, Y+8	; 0x08
     c3c:	69 85       	ldd	r22, Y+9	; 0x09
     c3e:	7a 85       	ldd	r23, Y+10	; 0x0a
     c40:	ce 01       	movw	r24, r28
     c42:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN12Schrittmotor25SetSpeedFloatOhneRichtungEf>
		modus = oben;
     c46:	84 e0       	ldi	r24, 0x04	; 4
     c48:	8e 83       	std	Y+6, r24	; 0x06
	}
}
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	cf 90       	pop	r12
     c56:	bf 90       	pop	r11
     c58:	af 90       	pop	r10
     c5a:	9f 90       	pop	r9
     c5c:	8f 90       	pop	r8
     c5e:	08 95       	ret

00000c60 <_ZN12Schrittmotor8TickObenEf>:

void Schrittmotor::TickOben(float sekunden){
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	ec 01       	movw	r28, r24
	if(zeitSeitAnlauf >= zeitBeschl + zeitFS)
     c66:	2f 8d       	ldd	r18, Y+31	; 0x1f
     c68:	38 a1       	ldd	r19, Y+32	; 0x20
     c6a:	49 a1       	ldd	r20, Y+33	; 0x21
     c6c:	5a a1       	ldd	r21, Y+34	; 0x22
     c6e:	6b a1       	ldd	r22, Y+35	; 0x23
     c70:	7c a1       	ldd	r23, Y+36	; 0x24
     c72:	8d a1       	ldd	r24, Y+37	; 0x25
     c74:	9e a1       	ldd	r25, Y+38	; 0x26
     c76:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     c7a:	9b 01       	movw	r18, r22
     c7c:	ac 01       	movw	r20, r24
     c7e:	6b ad       	ldd	r22, Y+59	; 0x3b
     c80:	7c ad       	ldd	r23, Y+60	; 0x3c
     c82:	8d ad       	ldd	r24, Y+61	; 0x3d
     c84:	9e ad       	ldd	r25, Y+62	; 0x3e
     c86:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__gesf2>
     c8a:	88 23       	and	r24, r24
     c8c:	14 f0       	brlt	.+4      	; 0xc92 <_ZN12Schrittmotor8TickObenEf+0x32>
		modus = rampeRunter;
     c8e:	85 e0       	ldi	r24, 0x05	; 5
     c90:	8e 83       	std	Y+6, r24	; 0x06
}
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	08 95       	ret

00000c98 <_ZN12Schrittmotor15TickRampeRunterEf>:

void Schrittmotor::TickRampeRunter(float sekunden){
     c98:	8f 92       	push	r8
     c9a:	9f 92       	push	r9
     c9c:	af 92       	push	r10
     c9e:	bf 92       	push	r11
     ca0:	cf 92       	push	r12
     ca2:	df 92       	push	r13
     ca4:	ef 92       	push	r14
     ca6:	ff 92       	push	r15
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	ec 01       	movw	r28, r24
     cae:	4a 01       	movw	r8, r20
     cb0:	5b 01       	movw	r10, r22
	if(zeitSeitAnlauf < zeitBeschl + zeitFS + zeitAbb){
     cb2:	cf a0       	ldd	r12, Y+39	; 0x27
     cb4:	d8 a4       	ldd	r13, Y+40	; 0x28
     cb6:	e9 a4       	ldd	r14, Y+41	; 0x29
     cb8:	fa a4       	ldd	r15, Y+42	; 0x2a
     cba:	2f 8d       	ldd	r18, Y+31	; 0x1f
     cbc:	38 a1       	ldd	r19, Y+32	; 0x20
     cbe:	49 a1       	ldd	r20, Y+33	; 0x21
     cc0:	5a a1       	ldd	r21, Y+34	; 0x22
     cc2:	6b a1       	ldd	r22, Y+35	; 0x23
     cc4:	7c a1       	ldd	r23, Y+36	; 0x24
     cc6:	8d a1       	ldd	r24, Y+37	; 0x25
     cc8:	9e a1       	ldd	r25, Y+38	; 0x26
     cca:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     cce:	a7 01       	movw	r20, r14
     cd0:	96 01       	movw	r18, r12
     cd2:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     cd6:	9b 01       	movw	r18, r22
     cd8:	ac 01       	movw	r20, r24
     cda:	6b ad       	ldd	r22, Y+59	; 0x3b
     cdc:	7c ad       	ldd	r23, Y+60	; 0x3c
     cde:	8d ad       	ldd	r24, Y+61	; 0x3d
     ce0:	9e ad       	ldd	r25, Y+62	; 0x3e
     ce2:	0e 94 bd 0a 	call	0x157a	; 0x157a <__cmpsf2>
     ce6:	88 23       	and	r24, r24
     ce8:	94 f5       	brge	.+100    	; 0xd4e <_ZN12Schrittmotor15TickRampeRunterEf+0xb6>
		rampeSpeedUPS -= sollUps * sekunden / zeitAbb;
     cea:	2f 81       	ldd	r18, Y+7	; 0x07
     cec:	38 85       	ldd	r19, Y+8	; 0x08
     cee:	49 85       	ldd	r20, Y+9	; 0x09
     cf0:	5a 85       	ldd	r21, Y+10	; 0x0a
     cf2:	c5 01       	movw	r24, r10
     cf4:	b4 01       	movw	r22, r8
     cf6:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
     cfa:	a7 01       	movw	r20, r14
     cfc:	96 01       	movw	r18, r12
     cfe:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__divsf3>
     d02:	9b 01       	movw	r18, r22
     d04:	ac 01       	movw	r20, r24
     d06:	6f a9       	ldd	r22, Y+55	; 0x37
     d08:	78 ad       	ldd	r23, Y+56	; 0x38
     d0a:	89 ad       	ldd	r24, Y+57	; 0x39
     d0c:	9a ad       	ldd	r25, Y+58	; 0x3a
     d0e:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__subsf3>
     d12:	6b 01       	movw	r12, r22
     d14:	7c 01       	movw	r14, r24
     d16:	6f ab       	std	Y+55, r22	; 0x37
     d18:	78 af       	std	Y+56, r23	; 0x38
     d1a:	89 af       	std	Y+57, r24	; 0x39
     d1c:	9a af       	std	Y+58, r25	; 0x3a
		if(rampeSpeedUPS < minimalSpeed)
     d1e:	fe 01       	movw	r30, r28
     d20:	ff 96       	adiw	r30, 0x3f	; 63
     d22:	80 80       	ld	r8, Z
     d24:	91 80       	ldd	r9, Z+1	; 0x01
     d26:	a2 80       	ldd	r10, Z+2	; 0x02
     d28:	b3 80       	ldd	r11, Z+3	; 0x03
     d2a:	a5 01       	movw	r20, r10
     d2c:	94 01       	movw	r18, r8
     d2e:	0e 94 bd 0a 	call	0x157a	; 0x157a <__cmpsf2>
     d32:	88 23       	and	r24, r24
     d34:	34 f4       	brge	.+12     	; 0xd42 <_ZN12Schrittmotor15TickRampeRunterEf+0xaa>
			SetSpeedFloatOhneRichtung(minimalSpeed);
     d36:	b5 01       	movw	r22, r10
     d38:	a4 01       	movw	r20, r8
     d3a:	ce 01       	movw	r24, r28
     d3c:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN12Schrittmotor25SetSpeedFloatOhneRichtungEf>
     d40:	11 c0       	rjmp	.+34     	; 0xd64 <_ZN12Schrittmotor15TickRampeRunterEf+0xcc>
		else
			SetSpeedFloatOhneRichtung(rampeSpeedUPS);
     d42:	b7 01       	movw	r22, r14
     d44:	a6 01       	movw	r20, r12
     d46:	ce 01       	movw	r24, r28
     d48:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN12Schrittmotor25SetSpeedFloatOhneRichtungEf>
     d4c:	0b c0       	rjmp	.+22     	; 0xd64 <_ZN12Schrittmotor15TickRampeRunterEf+0xcc>
		}else{
			SetSpeedFloatOhneRichtung(minimalSpeed);
     d4e:	fe 01       	movw	r30, r28
     d50:	ff 96       	adiw	r30, 0x3f	; 63
     d52:	40 81       	ld	r20, Z
     d54:	51 81       	ldd	r21, Z+1	; 0x01
     d56:	62 81       	ldd	r22, Z+2	; 0x02
     d58:	73 81       	ldd	r23, Z+3	; 0x03
     d5a:	ce 01       	movw	r24, r28
     d5c:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN12Schrittmotor25SetSpeedFloatOhneRichtungEf>
			modus = nachlauf;
     d60:	86 e0       	ldi	r24, 0x06	; 6
     d62:	8e 83       	std	Y+6, r24	; 0x06
	}

}
     d64:	df 91       	pop	r29
     d66:	cf 91       	pop	r28
     d68:	ff 90       	pop	r15
     d6a:	ef 90       	pop	r14
     d6c:	df 90       	pop	r13
     d6e:	cf 90       	pop	r12
     d70:	bf 90       	pop	r11
     d72:	af 90       	pop	r10
     d74:	9f 90       	pop	r9
     d76:	8f 90       	pop	r8
     d78:	08 95       	ret

00000d7a <_ZN12Schrittmotor12TickNachlaufEf>:

void Schrittmotor::TickNachlauf(float sekunden){
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	ec 01       	movw	r28, r24
	SetSpeedFloatOhneRichtung(0);
     d80:	40 e0       	ldi	r20, 0x00	; 0
     d82:	50 e0       	ldi	r21, 0x00	; 0
     d84:	ba 01       	movw	r22, r20
     d86:	0e 94 9e 04 	call	0x93c	; 0x93c <_ZN12Schrittmotor25SetSpeedFloatOhneRichtungEf>
	modus = powerOn;
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	8e 83       	std	Y+6, r24	; 0x06
	Usart0::sende(" --> Steht\r\n>: ");
     d8e:	8d e3       	ldi	r24, 0x3D	; 61
     d90:	91 e0       	ldi	r25, 0x01	; 1
     d92:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN6Usart05sendeEPKc>
}
     d96:	df 91       	pop	r29
     d98:	cf 91       	pop	r28
     d9a:	08 95       	ret

00000d9c <_ZN12Schrittmotor4TickEf>:
* \author Frank Tobergte
*
* \brief 10 msec Tick
* \param sekunden Abstand der Aufrufe in sekunden
************************************************************************/
void Schrittmotor::Tick(float sekunden){
     d9c:	cf 92       	push	r12
     d9e:	df 92       	push	r13
     da0:	ef 92       	push	r14
     da2:	ff 92       	push	r15
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	6b 01       	movw	r12, r22
     daa:	7c 01       	movw	r14, r24
	ich->zeitSeitAnlauf += sekunden;
     dac:	c0 91 5a 01 	lds	r28, 0x015A	; 0x80015a <__data_end>
     db0:	d0 91 5b 01 	lds	r29, 0x015B	; 0x80015b <__data_end+0x1>
     db4:	9b 01       	movw	r18, r22
     db6:	ac 01       	movw	r20, r24
     db8:	6b ad       	ldd	r22, Y+59	; 0x3b
     dba:	7c ad       	ldd	r23, Y+60	; 0x3c
     dbc:	8d ad       	ldd	r24, Y+61	; 0x3d
     dbe:	9e ad       	ldd	r25, Y+62	; 0x3e
     dc0:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     dc4:	6b af       	std	Y+59, r22	; 0x3b
     dc6:	7c af       	std	Y+60, r23	; 0x3c
     dc8:	8d af       	std	Y+61, r24	; 0x3d
     dca:	9e af       	std	Y+62, r25	; 0x3e
	switch(ich->modus){
     dcc:	8e 81       	ldd	r24, Y+6	; 0x06
     dce:	84 30       	cpi	r24, 0x04	; 4
     dd0:	b9 f0       	breq	.+46     	; 0xe00 <_ZN12Schrittmotor4TickEf+0x64>
     dd2:	28 f4       	brcc	.+10     	; 0xdde <_ZN12Schrittmotor4TickEf+0x42>
     dd4:	82 30       	cpi	r24, 0x02	; 2
     dd6:	41 f0       	breq	.+16     	; 0xde8 <_ZN12Schrittmotor4TickEf+0x4c>
     dd8:	83 30       	cpi	r24, 0x03	; 3
     dda:	61 f0       	breq	.+24     	; 0xdf4 <_ZN12Schrittmotor4TickEf+0x58>
     ddc:	22 c0       	rjmp	.+68     	; 0xe22 <_ZN12Schrittmotor4TickEf+0x86>
     dde:	85 30       	cpi	r24, 0x05	; 5
     de0:	a9 f0       	breq	.+42     	; 0xe0c <_ZN12Schrittmotor4TickEf+0x70>
     de2:	86 30       	cpi	r24, 0x06	; 6
     de4:	c9 f0       	breq	.+50     	; 0xe18 <_ZN12Schrittmotor4TickEf+0x7c>
     de6:	1d c0       	rjmp	.+58     	; 0xe22 <_ZN12Schrittmotor4TickEf+0x86>
		default:
		case aus:
			break;

		case dauerhaftAn:
			ich->TickDauerhaftAn(sekunden);
     de8:	b7 01       	movw	r22, r14
     dea:	a6 01       	movw	r20, r12
     dec:	ce 01       	movw	r24, r28
     dee:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <_ZN12Schrittmotor15TickDauerhaftAnEf>
			break;
     df2:	17 c0       	rjmp	.+46     	; 0xe22 <_ZN12Schrittmotor4TickEf+0x86>

		case rampeHoch:
			ich->TickRampeHoch(sekunden);
     df4:	b7 01       	movw	r22, r14
     df6:	a6 01       	movw	r20, r12
     df8:	ce 01       	movw	r24, r28
     dfa:	0e 94 d1 05 	call	0xba2	; 0xba2 <_ZN12Schrittmotor13TickRampeHochEf>
			break;
     dfe:	11 c0       	rjmp	.+34     	; 0xe22 <_ZN12Schrittmotor4TickEf+0x86>

		case oben:
			ich->TickOben(sekunden);
     e00:	b7 01       	movw	r22, r14
     e02:	a6 01       	movw	r20, r12
     e04:	ce 01       	movw	r24, r28
     e06:	0e 94 30 06 	call	0xc60	; 0xc60 <_ZN12Schrittmotor8TickObenEf>
			break;
     e0a:	0b c0       	rjmp	.+22     	; 0xe22 <_ZN12Schrittmotor4TickEf+0x86>

		case rampeRunter:
			ich->TickRampeRunter(sekunden);
     e0c:	b7 01       	movw	r22, r14
     e0e:	a6 01       	movw	r20, r12
     e10:	ce 01       	movw	r24, r28
     e12:	0e 94 4c 06 	call	0xc98	; 0xc98 <_ZN12Schrittmotor15TickRampeRunterEf>
			break;
     e16:	05 c0       	rjmp	.+10     	; 0xe22 <_ZN12Schrittmotor4TickEf+0x86>

		case nachlauf:
			ich->TickNachlauf(sekunden);
     e18:	b7 01       	movw	r22, r14
     e1a:	a6 01       	movw	r20, r12
     e1c:	ce 01       	movw	r24, r28
     e1e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <_ZN12Schrittmotor12TickNachlaufEf>
			break;

	}
}
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	ff 90       	pop	r15
     e28:	ef 90       	pop	r14
     e2a:	df 90       	pop	r13
     e2c:	cf 90       	pop	r12
     e2e:	08 95       	ret

00000e30 <_ZN12Schrittmotor14BerechneRampenEff>:
 *
 * \brief Berechnet die Rampen zum Beschleinigen und Abbremsen
 * \param anzahl der Umdrehungen die insgesamt gemacht werden sollen
 * \param zeit die fuer die Umdrehungen mit Rampen gebraucht werden soll
 ************************************************************************/
void Schrittmotor::BerechneRampen(float anzahl, float zeit) {
     e30:	4f 92       	push	r4
     e32:	5f 92       	push	r5
     e34:	6f 92       	push	r6
     e36:	7f 92       	push	r7
     e38:	8f 92       	push	r8
     e3a:	9f 92       	push	r9
     e3c:	af 92       	push	r10
     e3e:	bf 92       	push	r11
     e40:	cf 92       	push	r12
     e42:	df 92       	push	r13
     e44:	ef 92       	push	r14
     e46:	ff 92       	push	r15
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	cd b7       	in	r28, 0x3d	; 61
     e52:	de b7       	in	r29, 0x3e	; 62
     e54:	2a 97       	sbiw	r28, 0x0a	; 10
     e56:	0f b6       	in	r0, 0x3f	; 63
     e58:	f8 94       	cli
     e5a:	de bf       	out	0x3e, r29	; 62
     e5c:	0f be       	out	0x3f, r0	; 63
     e5e:	cd bf       	out	0x3d, r28	; 61
     e60:	9a 87       	std	Y+10, r25	; 0x0a
     e62:	89 87       	std	Y+9, r24	; 0x09
     e64:	6a 01       	movw	r12, r20
     e66:	7b 01       	movw	r14, r22
     e68:	09 83       	std	Y+1, r16	; 0x01
     e6a:	1a 83       	std	Y+2, r17	; 0x02
     e6c:	2b 83       	std	Y+3, r18	; 0x03
     e6e:	3c 83       	std	Y+4, r19	; 0x04
	float zeitReduziert;
	if(anzahl < 0){
     e70:	20 e0       	ldi	r18, 0x00	; 0
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	a9 01       	movw	r20, r18
     e76:	c7 01       	movw	r24, r14
     e78:	b6 01       	movw	r22, r12
     e7a:	0e 94 bd 0a 	call	0x157a	; 0x157a <__cmpsf2>
     e7e:	88 23       	and	r24, r24
     e80:	44 f4       	brge	.+16     	; 0xe92 <_ZN12Schrittmotor14BerechneRampenEff+0x62>
		InOut::Richtung(true);
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN5InOut8RichtungEb>
		anzahl = -anzahl;
     e88:	f7 fa       	bst	r15, 7
     e8a:	f0 94       	com	r15
     e8c:	f7 f8       	bld	r15, 7
     e8e:	f0 94       	com	r15
     e90:	03 c0       	rjmp	.+6      	; 0xe98 <_ZN12Schrittmotor14BerechneRampenEff+0x68>
	}
	else
		InOut::Richtung(false);
     e92:	80 e0       	ldi	r24, 0x00	; 0
     e94:	0e 94 c6 02 	call	0x58c	; 0x58c <_ZN5InOut8RichtungEb>

	if(zeit < beschleunigungsphaseInSekunden + abbremsphaseInSekunden){
     e98:	a9 85       	ldd	r26, Y+9	; 0x09
     e9a:	ba 85       	ldd	r27, Y+10	; 0x0a
     e9c:	5b 96       	adiw	r26, 0x1b	; 27
     e9e:	4d 90       	ld	r4, X+
     ea0:	5d 90       	ld	r5, X+
     ea2:	6d 90       	ld	r6, X+
     ea4:	7c 90       	ld	r7, X
     ea6:	5e 97       	sbiw	r26, 0x1e	; 30
     ea8:	57 96       	adiw	r26, 0x17	; 23
     eaa:	8d 90       	ld	r8, X+
     eac:	9d 90       	ld	r9, X+
     eae:	ad 90       	ld	r10, X+
     eb0:	bc 90       	ld	r11, X
     eb2:	5a 97       	sbiw	r26, 0x1a	; 26
     eb4:	a5 01       	movw	r20, r10
     eb6:	94 01       	movw	r18, r8
     eb8:	c3 01       	movw	r24, r6
     eba:	b2 01       	movw	r22, r4
     ebc:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     ec0:	29 81       	ldd	r18, Y+1	; 0x01
     ec2:	3a 81       	ldd	r19, Y+2	; 0x02
     ec4:	4b 81       	ldd	r20, Y+3	; 0x03
     ec6:	5c 81       	ldd	r21, Y+4	; 0x04
     ec8:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__gesf2>
     ecc:	18 16       	cp	r1, r24
     ece:	0c f0       	brlt	.+2      	; 0xed2 <_ZN12Schrittmotor14BerechneRampenEff+0xa2>
     ed0:	58 c0       	rjmp	.+176    	; 0xf82 <_ZN12Schrittmotor14BerechneRampenEff+0x152>
		zeitBeschl = zeit * (2.0 / 3.0);
     ed2:	2b ea       	ldi	r18, 0xAB	; 171
     ed4:	3a ea       	ldi	r19, 0xAA	; 170
     ed6:	4a e2       	ldi	r20, 0x2A	; 42
     ed8:	5f e3       	ldi	r21, 0x3F	; 63
     eda:	69 81       	ldd	r22, Y+1	; 0x01
     edc:	7a 81       	ldd	r23, Y+2	; 0x02
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
     ee6:	2b 01       	movw	r4, r22
     ee8:	3c 01       	movw	r6, r24
     eea:	e9 85       	ldd	r30, Y+9	; 0x09
     eec:	fa 85       	ldd	r31, Y+10	; 0x0a
     eee:	63 a3       	std	Z+35, r22	; 0x23
     ef0:	74 a3       	std	Z+36, r23	; 0x24
     ef2:	85 a3       	std	Z+37, r24	; 0x25
     ef4:	96 a3       	std	Z+38, r25	; 0x26
		zeitAbb = zeit - zeitBeschl;
     ef6:	9b 01       	movw	r18, r22
     ef8:	ac 01       	movw	r20, r24
     efa:	69 81       	ldd	r22, Y+1	; 0x01
     efc:	7a 81       	ldd	r23, Y+2	; 0x02
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	9c 81       	ldd	r25, Y+4	; 0x04
     f02:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__subsf3>
     f06:	4b 01       	movw	r8, r22
     f08:	5c 01       	movw	r10, r24
     f0a:	a9 85       	ldd	r26, Y+9	; 0x09
     f0c:	ba 85       	ldd	r27, Y+10	; 0x0a
     f0e:	97 96       	adiw	r26, 0x27	; 39
     f10:	6d 93       	st	X+, r22
     f12:	7d 93       	st	X+, r23
     f14:	8d 93       	st	X+, r24
     f16:	9c 93       	st	X, r25
     f18:	9a 97       	sbiw	r26, 0x2a	; 42
		//zeitReduziert = zeitBeschl / 2 + zeitAbb / 2;
		umdrBeschl = anzahl /zeit * zeitBeschl;
     f1a:	29 81       	ldd	r18, Y+1	; 0x01
     f1c:	3a 81       	ldd	r19, Y+2	; 0x02
     f1e:	4b 81       	ldd	r20, Y+3	; 0x03
     f20:	5c 81       	ldd	r21, Y+4	; 0x04
     f22:	c7 01       	movw	r24, r14
     f24:	b6 01       	movw	r22, r12
     f26:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__divsf3>
     f2a:	69 83       	std	Y+1, r22	; 0x01
     f2c:	7a 83       	std	Y+2, r23	; 0x02
     f2e:	8b 83       	std	Y+3, r24	; 0x03
     f30:	9c 83       	std	Y+4, r25	; 0x04
     f32:	9b 01       	movw	r18, r22
     f34:	ac 01       	movw	r20, r24
     f36:	c3 01       	movw	r24, r6
     f38:	b2 01       	movw	r22, r4
     f3a:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
     f3e:	e9 85       	ldd	r30, Y+9	; 0x09
     f40:	fa 85       	ldd	r31, Y+10	; 0x0a
     f42:	63 a7       	std	Z+43, r22	; 0x2b
     f44:	74 a7       	std	Z+44, r23	; 0x2c
     f46:	85 a7       	std	Z+45, r24	; 0x2d
     f48:	96 a7       	std	Z+46, r25	; 0x2e
		umdrAbb = anzahl /zeit * zeitAbb;
     f4a:	29 81       	ldd	r18, Y+1	; 0x01
     f4c:	3a 81       	ldd	r19, Y+2	; 0x02
     f4e:	4b 81       	ldd	r20, Y+3	; 0x03
     f50:	5c 81       	ldd	r21, Y+4	; 0x04
     f52:	c5 01       	movw	r24, r10
     f54:	b4 01       	movw	r22, r8
     f56:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
     f5a:	a9 85       	ldd	r26, Y+9	; 0x09
     f5c:	ba 85       	ldd	r27, Y+10	; 0x0a
     f5e:	9f 96       	adiw	r26, 0x2f	; 47
     f60:	6d 93       	st	X+, r22
     f62:	7d 93       	st	X+, r23
     f64:	8d 93       	st	X+, r24
     f66:	9c 93       	st	X, r25
     f68:	d2 97       	sbiw	r26, 0x32	; 50
		umdrFS = 0;
     f6a:	fd 01       	movw	r30, r26
     f6c:	13 aa       	std	Z+51, r1	; 0x33
     f6e:	14 aa       	std	Z+52, r1	; 0x34
     f70:	15 aa       	std	Z+53, r1	; 0x35
     f72:	16 aa       	std	Z+54, r1	; 0x36
		zeitFS = 0;
     f74:	5f 96       	adiw	r26, 0x1f	; 31
     f76:	1d 92       	st	X+, r1
     f78:	1d 92       	st	X+, r1
     f7a:	1d 92       	st	X+, r1
     f7c:	1c 92       	st	X, r1
     f7e:	92 97       	sbiw	r26, 0x22	; 34
     f80:	90 c0       	rjmp	.+288    	; 0x10a2 <_ZN12Schrittmotor14BerechneRampenEff+0x272>

		}else{
		zeitBeschl = beschleunigungsphaseInSekunden;
     f82:	e9 85       	ldd	r30, Y+9	; 0x09
     f84:	fa 85       	ldd	r31, Y+10	; 0x0a
     f86:	43 a2       	std	Z+35, r4	; 0x23
     f88:	54 a2       	std	Z+36, r5	; 0x24
     f8a:	65 a2       	std	Z+37, r6	; 0x25
     f8c:	76 a2       	std	Z+38, r7	; 0x26
		zeitAbb = abbremsphaseInSekunden;
     f8e:	87 a2       	std	Z+39, r8	; 0x27
     f90:	90 a6       	std	Z+40, r9	; 0x28
     f92:	a1 a6       	std	Z+41, r10	; 0x29
     f94:	b2 a6       	std	Z+42, r11	; 0x2a
		zeitFS = zeit - zeitBeschl - zeitAbb;
     f96:	a3 01       	movw	r20, r6
     f98:	92 01       	movw	r18, r4
     f9a:	69 81       	ldd	r22, Y+1	; 0x01
     f9c:	7a 81       	ldd	r23, Y+2	; 0x02
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__subsf3>
     fa6:	a5 01       	movw	r20, r10
     fa8:	94 01       	movw	r18, r8
     faa:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__subsf3>
     fae:	69 83       	std	Y+1, r22	; 0x01
     fb0:	7a 83       	std	Y+2, r23	; 0x02
     fb2:	8b 83       	std	Y+3, r24	; 0x03
     fb4:	9c 83       	std	Y+4, r25	; 0x04
     fb6:	e9 85       	ldd	r30, Y+9	; 0x09
     fb8:	fa 85       	ldd	r31, Y+10	; 0x0a
     fba:	67 8f       	std	Z+31, r22	; 0x1f
     fbc:	70 a3       	std	Z+32, r23	; 0x20
     fbe:	81 a3       	std	Z+33, r24	; 0x21
     fc0:	92 a3       	std	Z+34, r25	; 0x22
		zeitReduziert = zeitFS + zeitBeschl / 2 + zeitAbb / 2;
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	5f e3       	ldi	r21, 0x3F	; 63
     fca:	c3 01       	movw	r24, r6
     fcc:	b2 01       	movw	r22, r4
     fce:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
     fd2:	29 81       	ldd	r18, Y+1	; 0x01
     fd4:	3a 81       	ldd	r19, Y+2	; 0x02
     fd6:	4b 81       	ldd	r20, Y+3	; 0x03
     fd8:	5c 81       	ldd	r21, Y+4	; 0x04
     fda:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
     fde:	6d 83       	std	Y+5, r22	; 0x05
     fe0:	7e 83       	std	Y+6, r23	; 0x06
     fe2:	8f 83       	std	Y+7, r24	; 0x07
     fe4:	98 87       	std	Y+8, r25	; 0x08
     fe6:	20 e0       	ldi	r18, 0x00	; 0
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	40 e0       	ldi	r20, 0x00	; 0
     fec:	5f e3       	ldi	r21, 0x3F	; 63
     fee:	c5 01       	movw	r24, r10
     ff0:	b4 01       	movw	r22, r8
     ff2:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
     ff6:	9b 01       	movw	r18, r22
     ff8:	ac 01       	movw	r20, r24
     ffa:	6d 81       	ldd	r22, Y+5	; 0x05
     ffc:	7e 81       	ldd	r23, Y+6	; 0x06
     ffe:	8f 81       	ldd	r24, Y+7	; 0x07
    1000:	98 85       	ldd	r25, Y+8	; 0x08
    1002:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
    1006:	6d 83       	std	Y+5, r22	; 0x05
    1008:	7e 83       	std	Y+6, r23	; 0x06
    100a:	8f 83       	std	Y+7, r24	; 0x07
    100c:	98 87       	std	Y+8, r25	; 0x08
		umdrFS = anzahl  * zeitFS / zeitReduziert;
    100e:	29 81       	ldd	r18, Y+1	; 0x01
    1010:	3a 81       	ldd	r19, Y+2	; 0x02
    1012:	4b 81       	ldd	r20, Y+3	; 0x03
    1014:	5c 81       	ldd	r21, Y+4	; 0x04
    1016:	c7 01       	movw	r24, r14
    1018:	b6 01       	movw	r22, r12
    101a:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
    101e:	2d 81       	ldd	r18, Y+5	; 0x05
    1020:	3e 81       	ldd	r19, Y+6	; 0x06
    1022:	4f 81       	ldd	r20, Y+7	; 0x07
    1024:	58 85       	ldd	r21, Y+8	; 0x08
    1026:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__divsf3>
    102a:	a9 85       	ldd	r26, Y+9	; 0x09
    102c:	ba 85       	ldd	r27, Y+10	; 0x0a
    102e:	d3 96       	adiw	r26, 0x33	; 51
    1030:	6d 93       	st	X+, r22
    1032:	7d 93       	st	X+, r23
    1034:	8d 93       	st	X+, r24
    1036:	9c 93       	st	X, r25
    1038:	d6 97       	sbiw	r26, 0x36	; 54
		umdrBeschl = anzahl /zeitReduziert * zeitBeschl / 2;
    103a:	2d 81       	ldd	r18, Y+5	; 0x05
    103c:	3e 81       	ldd	r19, Y+6	; 0x06
    103e:	4f 81       	ldd	r20, Y+7	; 0x07
    1040:	58 85       	ldd	r21, Y+8	; 0x08
    1042:	c7 01       	movw	r24, r14
    1044:	b6 01       	movw	r22, r12
    1046:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__divsf3>
    104a:	69 83       	std	Y+1, r22	; 0x01
    104c:	7a 83       	std	Y+2, r23	; 0x02
    104e:	8b 83       	std	Y+3, r24	; 0x03
    1050:	9c 83       	std	Y+4, r25	; 0x04
    1052:	9b 01       	movw	r18, r22
    1054:	ac 01       	movw	r20, r24
    1056:	c3 01       	movw	r24, r6
    1058:	b2 01       	movw	r22, r4
    105a:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	40 e0       	ldi	r20, 0x00	; 0
    1064:	5f e3       	ldi	r21, 0x3F	; 63
    1066:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
    106a:	e9 85       	ldd	r30, Y+9	; 0x09
    106c:	fa 85       	ldd	r31, Y+10	; 0x0a
    106e:	63 a7       	std	Z+43, r22	; 0x2b
    1070:	74 a7       	std	Z+44, r23	; 0x2c
    1072:	85 a7       	std	Z+45, r24	; 0x2d
    1074:	96 a7       	std	Z+46, r25	; 0x2e
		umdrAbb = anzahl /zeitReduziert * zeitAbb / 2;
    1076:	29 81       	ldd	r18, Y+1	; 0x01
    1078:	3a 81       	ldd	r19, Y+2	; 0x02
    107a:	4b 81       	ldd	r20, Y+3	; 0x03
    107c:	5c 81       	ldd	r21, Y+4	; 0x04
    107e:	c5 01       	movw	r24, r10
    1080:	b4 01       	movw	r22, r8
    1082:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	5f e3       	ldi	r21, 0x3F	; 63
    108e:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
    1092:	a9 85       	ldd	r26, Y+9	; 0x09
    1094:	ba 85       	ldd	r27, Y+10	; 0x0a
    1096:	9f 96       	adiw	r26, 0x2f	; 47
    1098:	6d 93       	st	X+, r22
    109a:	7d 93       	st	X+, r23
    109c:	8d 93       	st	X+, r24
    109e:	9c 93       	st	X, r25
    10a0:	d2 97       	sbiw	r26, 0x32	; 50





	schritteZuGehen = round(anzahl *  Schrittmotor::GetPulseProUmdrehung()) ;
    10a2:	e9 85       	ldd	r30, Y+9	; 0x09
    10a4:	fa 85       	ldd	r31, Y+10	; 0x0a
    10a6:	24 81       	ldd	r18, Z+4	; 0x04
    10a8:	35 81       	ldd	r19, Z+5	; 0x05
    10aa:	a2 81       	ldd	r26, Z+2	; 0x02
    10ac:	b3 81       	ldd	r27, Z+3	; 0x03
    10ae:	0e 94 ef 0c 	call	0x19de	; 0x19de <__umulhisi3>
    10b2:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__floatunsisf>
    10b6:	a7 01       	movw	r20, r14
    10b8:	96 01       	movw	r18, r12
    10ba:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
    10be:	0e 94 8e 0c 	call	0x191c	; 0x191c <round>
    10c2:	a9 84       	ldd	r10, Y+9	; 0x09
    10c4:	ba 84       	ldd	r11, Y+10	; 0x0a
    10c6:	f7 e4       	ldi	r31, 0x47	; 71
    10c8:	af 0e       	add	r10, r31
    10ca:	b1 1c       	adc	r11, r1
    10cc:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__fixunssfsi>
    10d0:	d5 01       	movw	r26, r10
    10d2:	6d 93       	st	X+, r22
    10d4:	7d 93       	st	X+, r23
    10d6:	8d 93       	st	X+, r24
    10d8:	9c 93       	st	X, r25
    10da:	13 97       	sbiw	r26, 0x03	; 3
	if(zeitFS > 0.0)
    10dc:	e9 85       	ldd	r30, Y+9	; 0x09
    10de:	fa 85       	ldd	r31, Y+10	; 0x0a
    10e0:	87 8c       	ldd	r8, Z+31	; 0x1f
    10e2:	90 a0       	ldd	r9, Z+32	; 0x20
    10e4:	a1 a0       	ldd	r10, Z+33	; 0x21
    10e6:	b2 a0       	ldd	r11, Z+34	; 0x22
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	a9 01       	movw	r20, r18
    10ee:	c5 01       	movw	r24, r10
    10f0:	b4 01       	movw	r22, r8
    10f2:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__gesf2>
    10f6:	18 16       	cp	r1, r24
    10f8:	9c f4       	brge	.+38     	; 0x1120 <_ZN12Schrittmotor14BerechneRampenEff+0x2f0>
		sollUps = umdrFS / zeitFS;
    10fa:	a5 01       	movw	r20, r10
    10fc:	94 01       	movw	r18, r8
    10fe:	a9 85       	ldd	r26, Y+9	; 0x09
    1100:	ba 85       	ldd	r27, Y+10	; 0x0a
    1102:	d3 96       	adiw	r26, 0x33	; 51
    1104:	6d 91       	ld	r22, X+
    1106:	7d 91       	ld	r23, X+
    1108:	8d 91       	ld	r24, X+
    110a:	9c 91       	ld	r25, X
    110c:	d6 97       	sbiw	r26, 0x36	; 54
    110e:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__divsf3>
    1112:	e9 85       	ldd	r30, Y+9	; 0x09
    1114:	fa 85       	ldd	r31, Y+10	; 0x0a
    1116:	67 83       	std	Z+7, r22	; 0x07
    1118:	70 87       	std	Z+8, r23	; 0x08
    111a:	81 87       	std	Z+9, r24	; 0x09
    111c:	92 87       	std	Z+10, r25	; 0x0a
    111e:	1a c0       	rjmp	.+52     	; 0x1154 <_ZN12Schrittmotor14BerechneRampenEff+0x324>
	else
		sollUps = umdrBeschl / zeitBeschl * 2;
    1120:	a9 85       	ldd	r26, Y+9	; 0x09
    1122:	ba 85       	ldd	r27, Y+10	; 0x0a
    1124:	93 96       	adiw	r26, 0x23	; 35
    1126:	2d 91       	ld	r18, X+
    1128:	3d 91       	ld	r19, X+
    112a:	4d 91       	ld	r20, X+
    112c:	5c 91       	ld	r21, X
    112e:	96 97       	sbiw	r26, 0x26	; 38
    1130:	9b 96       	adiw	r26, 0x2b	; 43
    1132:	6d 91       	ld	r22, X+
    1134:	7d 91       	ld	r23, X+
    1136:	8d 91       	ld	r24, X+
    1138:	9c 91       	ld	r25, X
    113a:	9e 97       	sbiw	r26, 0x2e	; 46
    113c:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__divsf3>
    1140:	9b 01       	movw	r18, r22
    1142:	ac 01       	movw	r20, r24
    1144:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <__addsf3>
    1148:	e9 85       	ldd	r30, Y+9	; 0x09
    114a:	fa 85       	ldd	r31, Y+10	; 0x0a
    114c:	67 83       	std	Z+7, r22	; 0x07
    114e:	70 87       	std	Z+8, r23	; 0x08
    1150:	81 87       	std	Z+9, r24	; 0x09
    1152:	92 87       	std	Z+10, r25	; 0x0a

	if(sollUps > maximalSpeed){
    1154:	e9 85       	ldd	r30, Y+9	; 0x09
    1156:	fa 85       	ldd	r31, Y+10	; 0x0a
    1158:	ed 5b       	subi	r30, 0xBD	; 189
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	80 80       	ld	r8, Z
    115e:	91 80       	ldd	r9, Z+1	; 0x01
    1160:	a2 80       	ldd	r10, Z+2	; 0x02
    1162:	b3 80       	ldd	r11, Z+3	; 0x03
    1164:	a5 01       	movw	r20, r10
    1166:	94 01       	movw	r18, r8
    1168:	a9 85       	ldd	r26, Y+9	; 0x09
    116a:	ba 85       	ldd	r27, Y+10	; 0x0a
    116c:	17 96       	adiw	r26, 0x07	; 7
    116e:	6d 91       	ld	r22, X+
    1170:	7d 91       	ld	r23, X+
    1172:	8d 91       	ld	r24, X+
    1174:	9c 91       	ld	r25, X
    1176:	1a 97       	sbiw	r26, 0x0a	; 10
    1178:	0e 94 1c 0c 	call	0x1838	; 0x1838 <__gesf2>
    117c:	18 16       	cp	r1, r24
    117e:	0c f0       	brlt	.+2      	; 0x1182 <_ZN12Schrittmotor14BerechneRampenEff+0x352>
    1180:	56 c0       	rjmp	.+172    	; 0x122e <_ZN12Schrittmotor14BerechneRampenEff+0x3fe>
		sollUps = maximalSpeed;
    1182:	e9 85       	ldd	r30, Y+9	; 0x09
    1184:	fa 85       	ldd	r31, Y+10	; 0x0a
    1186:	87 82       	std	Z+7, r8	; 0x07
    1188:	90 86       	std	Z+8, r9	; 0x08
    118a:	a1 86       	std	Z+9, r10	; 0x09
    118c:	b2 86       	std	Z+10, r11	; 0x0a
		umdrBeschl = sollUps * zeitBeschl / 2;
    118e:	23 a1       	ldd	r18, Z+35	; 0x23
    1190:	34 a1       	ldd	r19, Z+36	; 0x24
    1192:	45 a1       	ldd	r20, Z+37	; 0x25
    1194:	56 a1       	ldd	r21, Z+38	; 0x26
    1196:	c5 01       	movw	r24, r10
    1198:	b4 01       	movw	r22, r8
    119a:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e0       	ldi	r20, 0x00	; 0
    11a4:	5f e3       	ldi	r21, 0x3F	; 63
    11a6:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
    11aa:	2b 01       	movw	r4, r22
    11ac:	3c 01       	movw	r6, r24
    11ae:	a9 85       	ldd	r26, Y+9	; 0x09
    11b0:	ba 85       	ldd	r27, Y+10	; 0x0a
    11b2:	9b 96       	adiw	r26, 0x2b	; 43
    11b4:	6d 93       	st	X+, r22
    11b6:	7d 93       	st	X+, r23
    11b8:	8d 93       	st	X+, r24
    11ba:	9c 93       	st	X, r25
    11bc:	9e 97       	sbiw	r26, 0x2e	; 46
		umdrAbb = sollUps * zeitAbb / 2;
    11be:	97 96       	adiw	r26, 0x27	; 39
    11c0:	2d 91       	ld	r18, X+
    11c2:	3d 91       	ld	r19, X+
    11c4:	4d 91       	ld	r20, X+
    11c6:	5c 91       	ld	r21, X
    11c8:	9a 97       	sbiw	r26, 0x2a	; 42
    11ca:	c5 01       	movw	r24, r10
    11cc:	b4 01       	movw	r22, r8
    11ce:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	40 e0       	ldi	r20, 0x00	; 0
    11d8:	5f e3       	ldi	r21, 0x3F	; 63
    11da:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
    11de:	69 83       	std	Y+1, r22	; 0x01
    11e0:	7a 83       	std	Y+2, r23	; 0x02
    11e2:	8b 83       	std	Y+3, r24	; 0x03
    11e4:	9c 83       	std	Y+4, r25	; 0x04
    11e6:	e9 85       	ldd	r30, Y+9	; 0x09
    11e8:	fa 85       	ldd	r31, Y+10	; 0x0a
    11ea:	67 a7       	std	Z+47, r22	; 0x2f
    11ec:	70 ab       	std	Z+48, r23	; 0x30
    11ee:	81 ab       	std	Z+49, r24	; 0x31
    11f0:	92 ab       	std	Z+50, r25	; 0x32
		umdrFS = anzahl - umdrBeschl - umdrAbb;
    11f2:	a3 01       	movw	r20, r6
    11f4:	92 01       	movw	r18, r4
    11f6:	c7 01       	movw	r24, r14
    11f8:	b6 01       	movw	r22, r12
    11fa:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__subsf3>
    11fe:	29 81       	ldd	r18, Y+1	; 0x01
    1200:	3a 81       	ldd	r19, Y+2	; 0x02
    1202:	4b 81       	ldd	r20, Y+3	; 0x03
    1204:	5c 81       	ldd	r21, Y+4	; 0x04
    1206:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <__subsf3>
    120a:	a9 85       	ldd	r26, Y+9	; 0x09
    120c:	ba 85       	ldd	r27, Y+10	; 0x0a
    120e:	d3 96       	adiw	r26, 0x33	; 51
    1210:	6d 93       	st	X+, r22
    1212:	7d 93       	st	X+, r23
    1214:	8d 93       	st	X+, r24
    1216:	9c 93       	st	X, r25
    1218:	d6 97       	sbiw	r26, 0x36	; 54
		zeitFS = umdrFS / sollUps;
    121a:	a5 01       	movw	r20, r10
    121c:	94 01       	movw	r18, r8
    121e:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__divsf3>
    1222:	e9 85       	ldd	r30, Y+9	; 0x09
    1224:	fa 85       	ldd	r31, Y+10	; 0x0a
    1226:	67 8f       	std	Z+31, r22	; 0x1f
    1228:	70 a3       	std	Z+32, r23	; 0x20
    122a:	81 a3       	std	Z+33, r24	; 0x21
    122c:	92 a3       	std	Z+34, r25	; 0x22
	}



    122e:	2a 96       	adiw	r28, 0x0a	; 10
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
    123a:	df 91       	pop	r29
    123c:	cf 91       	pop	r28
    123e:	1f 91       	pop	r17
    1240:	0f 91       	pop	r16
    1242:	ff 90       	pop	r15
    1244:	ef 90       	pop	r14
    1246:	df 90       	pop	r13
    1248:	cf 90       	pop	r12
    124a:	bf 90       	pop	r11
    124c:	af 90       	pop	r10
    124e:	9f 90       	pop	r9
    1250:	8f 90       	pop	r8
    1252:	7f 90       	pop	r7
    1254:	6f 90       	pop	r6
    1256:	5f 90       	pop	r5
    1258:	4f 90       	pop	r4
    125a:	08 95       	ret

0000125c <_ZN12Schrittmotor18UmdrehungenMitZeitEff>:
 * in einer angegebenen Zeit ein.
 * \param umdr Anzahl der Umdrehungen
 * \param zeit die fuer die Umdrehungen vorgesehen ist
 * \return = true wenn der Befehl ausgefuehrt wurde
 ************************************************************************/
	bool Schrittmotor::UmdrehungenMitZeit(float umdr, float zeit){
    125c:	0f 93       	push	r16
    125e:	1f 93       	push	r17
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
		bool ok = false;
		switch(modus){
    1264:	dc 01       	movw	r26, r24
    1266:	16 96       	adiw	r26, 0x06	; 6
    1268:	ec 91       	ld	r30, X
    126a:	e1 30       	cpi	r30, 0x01	; 1
    126c:	79 f4       	brne	.+30     	; 0x128c <_ZN12Schrittmotor18UmdrehungenMitZeitEff+0x30>
    126e:	ec 01       	movw	r28, r24
			case powerOn:
				BerechneRampen(umdr, zeit);
    1270:	0e 94 18 07 	call	0xe30	; 0xe30 <_ZN12Schrittmotor14BerechneRampenEff>
				zeitSeitAnlauf = 0;
    1274:	1b ae       	std	Y+59, r1	; 0x3b
    1276:	1c ae       	std	Y+60, r1	; 0x3c
    1278:	1d ae       	std	Y+61, r1	; 0x3d
    127a:	1e ae       	std	Y+62, r1	; 0x3e
				rampeSpeedUPS = 0;
    127c:	1f aa       	std	Y+55, r1	; 0x37
    127e:	18 ae       	std	Y+56, r1	; 0x38
    1280:	19 ae       	std	Y+57, r1	; 0x39
    1282:	1a ae       	std	Y+58, r1	; 0x3a
				ok = true;
				modus = rampeHoch;
    1284:	83 e0       	ldi	r24, 0x03	; 3
    1286:	8e 83       	std	Y+6, r24	; 0x06
		switch(modus){
			case powerOn:
				BerechneRampen(umdr, zeit);
				zeitSeitAnlauf = 0;
				rampeSpeedUPS = 0;
				ok = true;
    1288:	81 e0       	ldi	r24, 0x01	; 1
				modus = rampeHoch;
				break;
    128a:	01 c0       	rjmp	.+2      	; 0x128e <_ZN12Schrittmotor18UmdrehungenMitZeitEff+0x32>
 * \param umdr Anzahl der Umdrehungen
 * \param zeit die fuer die Umdrehungen vorgesehen ist
 * \return = true wenn der Befehl ausgefuehrt wurde
 ************************************************************************/
	bool Schrittmotor::UmdrehungenMitZeit(float umdr, float zeit){
		bool ok = false;
    128c:	80 e0       	ldi	r24, 0x00	; 0

			default:
				break;
		}
		return ok;
	}
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	08 95       	ret

00001298 <_ZN6Usart0C1Ev>:
 * \author Frank Tobergte
 *
 * \brief Interrupt das alle Daten aus der Usart gesendet wurden
 * \remark wird zur Zeit nicht verwendet
 ************************************************************************/
void Usart0::interTx(){
    1298:	08 95       	ret

0000129a <_ZN6Usart04initEl>:
    129a:	cf 92       	push	r12
    129c:	df 92       	push	r13
    129e:	ef 92       	push	r14
    12a0:	ff 92       	push	r15
    12a2:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <__floatsisf>
    12a6:	6b 01       	movw	r12, r22
    12a8:	7c 01       	movw	r14, r24
    12aa:	9b 01       	movw	r18, r22
    12ac:	ac 01       	movw	r20, r24
    12ae:	60 e0       	ldi	r22, 0x00	; 0
    12b0:	74 e2       	ldi	r23, 0x24	; 36
    12b2:	84 e7       	ldi	r24, 0x74	; 116
    12b4:	99 e4       	ldi	r25, 0x49	; 73
    12b6:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__divsf3>
    12ba:	0e 94 34 0b 	call	0x1668	; 0x1668 <__fixsfsi>
    12be:	9b 01       	movw	r18, r22
    12c0:	21 70       	andi	r18, 0x01	; 1
    12c2:	33 27       	eor	r19, r19
    12c4:	23 2b       	or	r18, r19
    12c6:	c1 f0       	breq	.+48     	; 0x12f8 <_ZN6Usart04initEl+0x5e>
    12c8:	82 e0       	ldi	r24, 0x02	; 2
    12ca:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    12ce:	88 e9       	ldi	r24, 0x98	; 152
    12d0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    12d4:	86 e2       	ldi	r24, 0x26	; 38
    12d6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    12da:	a7 01       	movw	r20, r14
    12dc:	96 01       	movw	r18, r12
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	74 e2       	ldi	r23, 0x24	; 36
    12e2:	84 ef       	ldi	r24, 0xF4	; 244
    12e4:	99 e4       	ldi	r25, 0x49	; 73
    12e6:	0e 94 c2 0a 	call	0x1584	; 0x1584 <__divsf3>
    12ea:	0e 94 34 0b 	call	0x1668	; 0x1668 <__fixsfsi>
    12ee:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    12f2:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    12f6:	0c c0       	rjmp	.+24     	; 0x1310 <_ZN6Usart04initEl+0x76>
    12f8:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    12fc:	28 e9       	ldi	r18, 0x98	; 152
    12fe:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
    1302:	26 e2       	ldi	r18, 0x26	; 38
    1304:	20 93 c2 00 	sts	0x00C2, r18	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    1308:	70 93 c5 00 	sts	0x00C5, r23	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    130c:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
    1310:	ff 90       	pop	r15
    1312:	ef 90       	pop	r14
    1314:	df 90       	pop	r13
    1316:	cf 90       	pop	r12
    1318:	08 95       	ret

0000131a <_ZN6Usart0C1El>:
    131a:	cb 01       	movw	r24, r22
    131c:	ba 01       	movw	r22, r20
    131e:	0e 94 4d 09 	call	0x129a	; 0x129a <_ZN6Usart04initEl>
    1322:	08 95       	ret

00001324 <_ZN6Usart05sendeEc>:
    1324:	cf 93       	push	r28
    1326:	c8 2f       	mov	r28, r24
    1328:	8c e5       	ldi	r24, 0x5C	; 92
    132a:	91 e0       	ldi	r25, 0x01	; 1
    132c:	0e 94 84 03 	call	0x708	; 0x708 <_ZN10Ringbuffer6isFullEv>
    1330:	81 11       	cpse	r24, r1
    1332:	0c c0       	rjmp	.+24     	; 0x134c <_ZN6Usart05sendeEc+0x28>
    1334:	6c 2f       	mov	r22, r28
    1336:	8c e5       	ldi	r24, 0x5C	; 92
    1338:	91 e0       	ldi	r25, 0x01	; 1
    133a:	0e 94 98 03 	call	0x730	; 0x730 <_ZN10Ringbuffer4pushEc>
    133e:	e1 ec       	ldi	r30, 0xC1	; 193
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	80 62       	ori	r24, 0x20	; 32
    1346:	80 83       	st	Z, r24
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	01 c0       	rjmp	.+2      	; 0x134e <_ZN6Usart05sendeEc+0x2a>
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	cf 91       	pop	r28
    1350:	08 95       	ret

00001352 <_ZN6Usart05sendeEPKc>:
    1352:	cf 93       	push	r28
    1354:	df 93       	push	r29
    1356:	ec 01       	movw	r28, r24
    1358:	88 81       	ld	r24, Y
    135a:	88 23       	and	r24, r24
    135c:	31 f0       	breq	.+12     	; 0x136a <_ZN6Usart05sendeEPKc+0x18>
    135e:	21 96       	adiw	r28, 0x01	; 1
    1360:	0e 94 92 09 	call	0x1324	; 0x1324 <_ZN6Usart05sendeEc>
    1364:	89 91       	ld	r24, Y+
    1366:	81 11       	cpse	r24, r1
    1368:	fb cf       	rjmp	.-10     	; 0x1360 <_ZN6Usart05sendeEPKc+0xe>
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	08 95       	ret

00001372 <_ZN6Usart012isWasZuLesenEv>:
    1372:	80 ef       	ldi	r24, 0xF0	; 240
    1374:	92 e0       	ldi	r25, 0x02	; 2
    1376:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_ZN10Ringbuffer7isEmptyEv>
    137a:	91 e0       	ldi	r25, 0x01	; 1
    137c:	89 27       	eor	r24, r25
    137e:	08 95       	ret

00001380 <_ZN6Usart05lesenEv>:
    1380:	80 ef       	ldi	r24, 0xF0	; 240
    1382:	92 e0       	ldi	r25, 0x02	; 2
    1384:	0e 94 b4 03 	call	0x768	; 0x768 <_ZN10Ringbuffer3popEv>
    1388:	08 95       	ret

0000138a <_ZN6Usart09interUdreEv>:
    138a:	8c e5       	ldi	r24, 0x5C	; 92
    138c:	91 e0       	ldi	r25, 0x01	; 1
    138e:	0e 94 74 03 	call	0x6e8	; 0x6e8 <_ZN10Ringbuffer7isEmptyEv>
    1392:	88 23       	and	r24, r24
    1394:	31 f0       	breq	.+12     	; 0x13a2 <_ZN6Usart09interUdreEv+0x18>
    1396:	e1 ec       	ldi	r30, 0xC1	; 193
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	8f 7d       	andi	r24, 0xDF	; 223
    139e:	80 83       	st	Z, r24
    13a0:	08 95       	ret
    13a2:	8c e5       	ldi	r24, 0x5C	; 92
    13a4:	91 e0       	ldi	r25, 0x01	; 1
    13a6:	0e 94 b4 03 	call	0x768	; 0x768 <_ZN10Ringbuffer3popEv>
    13aa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    13ae:	08 95       	ret

000013b0 <_ZN6Usart07interRxEv>:
    13b0:	cf 93       	push	r28
    13b2:	80 e2       	ldi	r24, 0x20	; 32
    13b4:	83 b9       	out	0x03, r24	; 3
    13b6:	80 ef       	ldi	r24, 0xF0	; 240
    13b8:	92 e0       	ldi	r25, 0x02	; 2
    13ba:	0e 94 84 03 	call	0x708	; 0x708 <_ZN10Ringbuffer6isFullEv>
    13be:	88 23       	and	r24, r24
    13c0:	31 f0       	breq	.+12     	; 0x13ce <_ZN6Usart07interRxEv+0x1e>
    13c2:	e1 ec       	ldi	r30, 0xC1	; 193
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	8f 77       	andi	r24, 0x7F	; 127
    13ca:	80 83       	st	Z, r24
    13cc:	0c c0       	rjmp	.+24     	; 0x13e6 <_ZN6Usart07interRxEv+0x36>
    13ce:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    13d2:	6c 2f       	mov	r22, r28
    13d4:	80 ef       	ldi	r24, 0xF0	; 240
    13d6:	92 e0       	ldi	r25, 0x02	; 2
    13d8:	0e 94 98 03 	call	0x730	; 0x730 <_ZN10Ringbuffer4pushEc>
    13dc:	c0 32       	cpi	r28, 0x20	; 32
    13de:	18 f0       	brcs	.+6      	; 0x13e6 <_ZN6Usart07interRxEv+0x36>
    13e0:	8c 2f       	mov	r24, r28
    13e2:	0e 94 92 09 	call	0x1324	; 0x1324 <_ZN6Usart05sendeEc>
    13e6:	cf 91       	pop	r28
    13e8:	08 95       	ret

000013ea <__vector_18>:
 * \author Frank Tobergte
 *
 * \brief Interrupt in Klasse
 * 
 ************************************************************************/
void USART_RX_vect(void){
    13ea:	1f 92       	push	r1
    13ec:	0f 92       	push	r0
    13ee:	0f b6       	in	r0, 0x3f	; 63
    13f0:	0f 92       	push	r0
    13f2:	11 24       	eor	r1, r1
    13f4:	2f 93       	push	r18
    13f6:	3f 93       	push	r19
    13f8:	4f 93       	push	r20
    13fa:	5f 93       	push	r21
    13fc:	6f 93       	push	r22
    13fe:	7f 93       	push	r23
    1400:	8f 93       	push	r24
    1402:	9f 93       	push	r25
    1404:	af 93       	push	r26
    1406:	bf 93       	push	r27
    1408:	ef 93       	push	r30
    140a:	ff 93       	push	r31
	Usart0::interRx();
    140c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <_ZN6Usart07interRxEv>
}
    1410:	ff 91       	pop	r31
    1412:	ef 91       	pop	r30
    1414:	bf 91       	pop	r27
    1416:	af 91       	pop	r26
    1418:	9f 91       	pop	r25
    141a:	8f 91       	pop	r24
    141c:	7f 91       	pop	r23
    141e:	6f 91       	pop	r22
    1420:	5f 91       	pop	r21
    1422:	4f 91       	pop	r20
    1424:	3f 91       	pop	r19
    1426:	2f 91       	pop	r18
    1428:	0f 90       	pop	r0
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	0f 90       	pop	r0
    142e:	1f 90       	pop	r1
    1430:	18 95       	reti

00001432 <__vector_20>:
 * \author Frank Tobergte
 *
 * \brief Interrupt in Klasse
 * 
 ************************************************************************/
void USART_TX_vect(void){
    1432:	1f 92       	push	r1
    1434:	0f 92       	push	r0
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	0f 92       	push	r0
    143a:	11 24       	eor	r1, r1
	Usart0::interTx();
}
    143c:	0f 90       	pop	r0
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	0f 90       	pop	r0
    1442:	1f 90       	pop	r1
    1444:	18 95       	reti

00001446 <__vector_19>:
 * \author Frank Tobergte
 *
 * \brief Interrupt in Klasse
 * 
 ************************************************************************/ 
void USART_UDRE_vect(void){
    1446:	1f 92       	push	r1
    1448:	0f 92       	push	r0
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	0f 92       	push	r0
    144e:	11 24       	eor	r1, r1
    1450:	2f 93       	push	r18
    1452:	3f 93       	push	r19
    1454:	4f 93       	push	r20
    1456:	5f 93       	push	r21
    1458:	6f 93       	push	r22
    145a:	7f 93       	push	r23
    145c:	8f 93       	push	r24
    145e:	9f 93       	push	r25
    1460:	af 93       	push	r26
    1462:	bf 93       	push	r27
    1464:	ef 93       	push	r30
    1466:	ff 93       	push	r31
	Usart0::interUdre();
    1468:	0e 94 c5 09 	call	0x138a	; 0x138a <_ZN6Usart09interUdreEv>
}
    146c:	ff 91       	pop	r31
    146e:	ef 91       	pop	r30
    1470:	bf 91       	pop	r27
    1472:	af 91       	pop	r26
    1474:	9f 91       	pop	r25
    1476:	8f 91       	pop	r24
    1478:	7f 91       	pop	r23
    147a:	6f 91       	pop	r22
    147c:	5f 91       	pop	r21
    147e:	4f 91       	pop	r20
    1480:	3f 91       	pop	r19
    1482:	2f 91       	pop	r18
    1484:	0f 90       	pop	r0
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	0f 90       	pop	r0
    148a:	1f 90       	pop	r1
    148c:	18 95       	reti

0000148e <_GLOBAL__sub_I__ZN6Usart014empfangsBufferE>:

#include <avr/io.h>
#include "Usart0.h"


Ringbuffer Usart0::empfangsBuffer;
    148e:	80 ef       	ldi	r24, 0xF0	; 240
    1490:	92 e0       	ldi	r25, 0x02	; 2
    1492:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN10RingbufferC1Ev>
Ringbuffer Usart0::sendeBuffer;
    1496:	8c e5       	ldi	r24, 0x5C	; 92
    1498:	91 e0       	ldi	r25, 0x01	; 1
    149a:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <_ZN10RingbufferC1Ev>
    149e:	08 95       	ret

000014a0 <__subsf3>:
    14a0:	50 58       	subi	r21, 0x80	; 128

000014a2 <__addsf3>:
    14a2:	bb 27       	eor	r27, r27
    14a4:	aa 27       	eor	r26, r26
    14a6:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <__addsf3x>
    14aa:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__fp_round>
    14ae:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__fp_pscA>
    14b2:	38 f0       	brcs	.+14     	; 0x14c2 <__addsf3+0x20>
    14b4:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__fp_pscB>
    14b8:	20 f0       	brcs	.+8      	; 0x14c2 <__addsf3+0x20>
    14ba:	39 f4       	brne	.+14     	; 0x14ca <__addsf3+0x28>
    14bc:	9f 3f       	cpi	r25, 0xFF	; 255
    14be:	19 f4       	brne	.+6      	; 0x14c6 <__addsf3+0x24>
    14c0:	26 f4       	brtc	.+8      	; 0x14ca <__addsf3+0x28>
    14c2:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__fp_nan>
    14c6:	0e f4       	brtc	.+2      	; 0x14ca <__addsf3+0x28>
    14c8:	e0 95       	com	r30
    14ca:	e7 fb       	bst	r30, 7
    14cc:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__fp_inf>

000014d0 <__addsf3x>:
    14d0:	e9 2f       	mov	r30, r25
    14d2:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__fp_split3>
    14d6:	58 f3       	brcs	.-42     	; 0x14ae <__addsf3+0xc>
    14d8:	ba 17       	cp	r27, r26
    14da:	62 07       	cpc	r22, r18
    14dc:	73 07       	cpc	r23, r19
    14de:	84 07       	cpc	r24, r20
    14e0:	95 07       	cpc	r25, r21
    14e2:	20 f0       	brcs	.+8      	; 0x14ec <__addsf3x+0x1c>
    14e4:	79 f4       	brne	.+30     	; 0x1504 <__addsf3x+0x34>
    14e6:	a6 f5       	brtc	.+104    	; 0x1550 <__addsf3x+0x80>
    14e8:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__fp_zero>
    14ec:	0e f4       	brtc	.+2      	; 0x14f0 <__addsf3x+0x20>
    14ee:	e0 95       	com	r30
    14f0:	0b 2e       	mov	r0, r27
    14f2:	ba 2f       	mov	r27, r26
    14f4:	a0 2d       	mov	r26, r0
    14f6:	0b 01       	movw	r0, r22
    14f8:	b9 01       	movw	r22, r18
    14fa:	90 01       	movw	r18, r0
    14fc:	0c 01       	movw	r0, r24
    14fe:	ca 01       	movw	r24, r20
    1500:	a0 01       	movw	r20, r0
    1502:	11 24       	eor	r1, r1
    1504:	ff 27       	eor	r31, r31
    1506:	59 1b       	sub	r21, r25
    1508:	99 f0       	breq	.+38     	; 0x1530 <__addsf3x+0x60>
    150a:	59 3f       	cpi	r21, 0xF9	; 249
    150c:	50 f4       	brcc	.+20     	; 0x1522 <__addsf3x+0x52>
    150e:	50 3e       	cpi	r21, 0xE0	; 224
    1510:	68 f1       	brcs	.+90     	; 0x156c <__addsf3x+0x9c>
    1512:	1a 16       	cp	r1, r26
    1514:	f0 40       	sbci	r31, 0x00	; 0
    1516:	a2 2f       	mov	r26, r18
    1518:	23 2f       	mov	r18, r19
    151a:	34 2f       	mov	r19, r20
    151c:	44 27       	eor	r20, r20
    151e:	58 5f       	subi	r21, 0xF8	; 248
    1520:	f3 cf       	rjmp	.-26     	; 0x1508 <__addsf3x+0x38>
    1522:	46 95       	lsr	r20
    1524:	37 95       	ror	r19
    1526:	27 95       	ror	r18
    1528:	a7 95       	ror	r26
    152a:	f0 40       	sbci	r31, 0x00	; 0
    152c:	53 95       	inc	r21
    152e:	c9 f7       	brne	.-14     	; 0x1522 <__addsf3x+0x52>
    1530:	7e f4       	brtc	.+30     	; 0x1550 <__addsf3x+0x80>
    1532:	1f 16       	cp	r1, r31
    1534:	ba 0b       	sbc	r27, r26
    1536:	62 0b       	sbc	r22, r18
    1538:	73 0b       	sbc	r23, r19
    153a:	84 0b       	sbc	r24, r20
    153c:	ba f0       	brmi	.+46     	; 0x156c <__addsf3x+0x9c>
    153e:	91 50       	subi	r25, 0x01	; 1
    1540:	a1 f0       	breq	.+40     	; 0x156a <__addsf3x+0x9a>
    1542:	ff 0f       	add	r31, r31
    1544:	bb 1f       	adc	r27, r27
    1546:	66 1f       	adc	r22, r22
    1548:	77 1f       	adc	r23, r23
    154a:	88 1f       	adc	r24, r24
    154c:	c2 f7       	brpl	.-16     	; 0x153e <__addsf3x+0x6e>
    154e:	0e c0       	rjmp	.+28     	; 0x156c <__addsf3x+0x9c>
    1550:	ba 0f       	add	r27, r26
    1552:	62 1f       	adc	r22, r18
    1554:	73 1f       	adc	r23, r19
    1556:	84 1f       	adc	r24, r20
    1558:	48 f4       	brcc	.+18     	; 0x156c <__addsf3x+0x9c>
    155a:	87 95       	ror	r24
    155c:	77 95       	ror	r23
    155e:	67 95       	ror	r22
    1560:	b7 95       	ror	r27
    1562:	f7 95       	ror	r31
    1564:	9e 3f       	cpi	r25, 0xFE	; 254
    1566:	08 f0       	brcs	.+2      	; 0x156a <__addsf3x+0x9a>
    1568:	b0 cf       	rjmp	.-160    	; 0x14ca <__addsf3+0x28>
    156a:	93 95       	inc	r25
    156c:	88 0f       	add	r24, r24
    156e:	08 f0       	brcs	.+2      	; 0x1572 <__addsf3x+0xa2>
    1570:	99 27       	eor	r25, r25
    1572:	ee 0f       	add	r30, r30
    1574:	97 95       	ror	r25
    1576:	87 95       	ror	r24
    1578:	08 95       	ret

0000157a <__cmpsf2>:
    157a:	0e 94 a7 0b 	call	0x174e	; 0x174e <__fp_cmp>
    157e:	08 f4       	brcc	.+2      	; 0x1582 <__cmpsf2+0x8>
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	08 95       	ret

00001584 <__divsf3>:
    1584:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <__divsf3x>
    1588:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__fp_round>
    158c:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__fp_pscB>
    1590:	58 f0       	brcs	.+22     	; 0x15a8 <__divsf3+0x24>
    1592:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__fp_pscA>
    1596:	40 f0       	brcs	.+16     	; 0x15a8 <__divsf3+0x24>
    1598:	29 f4       	brne	.+10     	; 0x15a4 <__divsf3+0x20>
    159a:	5f 3f       	cpi	r21, 0xFF	; 255
    159c:	29 f0       	breq	.+10     	; 0x15a8 <__divsf3+0x24>
    159e:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__fp_inf>
    15a2:	51 11       	cpse	r21, r1
    15a4:	0c 94 16 0c 	jmp	0x182c	; 0x182c <__fp_szero>
    15a8:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__fp_nan>

000015ac <__divsf3x>:
    15ac:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__fp_split3>
    15b0:	68 f3       	brcs	.-38     	; 0x158c <__divsf3+0x8>

000015b2 <__divsf3_pse>:
    15b2:	99 23       	and	r25, r25
    15b4:	b1 f3       	breq	.-20     	; 0x15a2 <__divsf3+0x1e>
    15b6:	55 23       	and	r21, r21
    15b8:	91 f3       	breq	.-28     	; 0x159e <__divsf3+0x1a>
    15ba:	95 1b       	sub	r25, r21
    15bc:	55 0b       	sbc	r21, r21
    15be:	bb 27       	eor	r27, r27
    15c0:	aa 27       	eor	r26, r26
    15c2:	62 17       	cp	r22, r18
    15c4:	73 07       	cpc	r23, r19
    15c6:	84 07       	cpc	r24, r20
    15c8:	38 f0       	brcs	.+14     	; 0x15d8 <__divsf3_pse+0x26>
    15ca:	9f 5f       	subi	r25, 0xFF	; 255
    15cc:	5f 4f       	sbci	r21, 0xFF	; 255
    15ce:	22 0f       	add	r18, r18
    15d0:	33 1f       	adc	r19, r19
    15d2:	44 1f       	adc	r20, r20
    15d4:	aa 1f       	adc	r26, r26
    15d6:	a9 f3       	breq	.-22     	; 0x15c2 <__divsf3_pse+0x10>
    15d8:	35 d0       	rcall	.+106    	; 0x1644 <__divsf3_pse+0x92>
    15da:	0e 2e       	mov	r0, r30
    15dc:	3a f0       	brmi	.+14     	; 0x15ec <__divsf3_pse+0x3a>
    15de:	e0 e8       	ldi	r30, 0x80	; 128
    15e0:	32 d0       	rcall	.+100    	; 0x1646 <__divsf3_pse+0x94>
    15e2:	91 50       	subi	r25, 0x01	; 1
    15e4:	50 40       	sbci	r21, 0x00	; 0
    15e6:	e6 95       	lsr	r30
    15e8:	00 1c       	adc	r0, r0
    15ea:	ca f7       	brpl	.-14     	; 0x15de <__divsf3_pse+0x2c>
    15ec:	2b d0       	rcall	.+86     	; 0x1644 <__divsf3_pse+0x92>
    15ee:	fe 2f       	mov	r31, r30
    15f0:	29 d0       	rcall	.+82     	; 0x1644 <__divsf3_pse+0x92>
    15f2:	66 0f       	add	r22, r22
    15f4:	77 1f       	adc	r23, r23
    15f6:	88 1f       	adc	r24, r24
    15f8:	bb 1f       	adc	r27, r27
    15fa:	26 17       	cp	r18, r22
    15fc:	37 07       	cpc	r19, r23
    15fe:	48 07       	cpc	r20, r24
    1600:	ab 07       	cpc	r26, r27
    1602:	b0 e8       	ldi	r27, 0x80	; 128
    1604:	09 f0       	breq	.+2      	; 0x1608 <__divsf3_pse+0x56>
    1606:	bb 0b       	sbc	r27, r27
    1608:	80 2d       	mov	r24, r0
    160a:	bf 01       	movw	r22, r30
    160c:	ff 27       	eor	r31, r31
    160e:	93 58       	subi	r25, 0x83	; 131
    1610:	5f 4f       	sbci	r21, 0xFF	; 255
    1612:	3a f0       	brmi	.+14     	; 0x1622 <__divsf3_pse+0x70>
    1614:	9e 3f       	cpi	r25, 0xFE	; 254
    1616:	51 05       	cpc	r21, r1
    1618:	78 f0       	brcs	.+30     	; 0x1638 <__divsf3_pse+0x86>
    161a:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__fp_inf>
    161e:	0c 94 16 0c 	jmp	0x182c	; 0x182c <__fp_szero>
    1622:	5f 3f       	cpi	r21, 0xFF	; 255
    1624:	e4 f3       	brlt	.-8      	; 0x161e <__divsf3_pse+0x6c>
    1626:	98 3e       	cpi	r25, 0xE8	; 232
    1628:	d4 f3       	brlt	.-12     	; 0x161e <__divsf3_pse+0x6c>
    162a:	86 95       	lsr	r24
    162c:	77 95       	ror	r23
    162e:	67 95       	ror	r22
    1630:	b7 95       	ror	r27
    1632:	f7 95       	ror	r31
    1634:	9f 5f       	subi	r25, 0xFF	; 255
    1636:	c9 f7       	brne	.-14     	; 0x162a <__divsf3_pse+0x78>
    1638:	88 0f       	add	r24, r24
    163a:	91 1d       	adc	r25, r1
    163c:	96 95       	lsr	r25
    163e:	87 95       	ror	r24
    1640:	97 f9       	bld	r25, 7
    1642:	08 95       	ret
    1644:	e1 e0       	ldi	r30, 0x01	; 1
    1646:	66 0f       	add	r22, r22
    1648:	77 1f       	adc	r23, r23
    164a:	88 1f       	adc	r24, r24
    164c:	bb 1f       	adc	r27, r27
    164e:	62 17       	cp	r22, r18
    1650:	73 07       	cpc	r23, r19
    1652:	84 07       	cpc	r24, r20
    1654:	ba 07       	cpc	r27, r26
    1656:	20 f0       	brcs	.+8      	; 0x1660 <__divsf3_pse+0xae>
    1658:	62 1b       	sub	r22, r18
    165a:	73 0b       	sbc	r23, r19
    165c:	84 0b       	sbc	r24, r20
    165e:	ba 0b       	sbc	r27, r26
    1660:	ee 1f       	adc	r30, r30
    1662:	88 f7       	brcc	.-30     	; 0x1646 <__divsf3_pse+0x94>
    1664:	e0 95       	com	r30
    1666:	08 95       	ret

00001668 <__fixsfsi>:
    1668:	0e 94 3b 0b 	call	0x1676	; 0x1676 <__fixunssfsi>
    166c:	68 94       	set
    166e:	b1 11       	cpse	r27, r1
    1670:	0c 94 16 0c 	jmp	0x182c	; 0x182c <__fp_szero>
    1674:	08 95       	ret

00001676 <__fixunssfsi>:
    1676:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__fp_splitA>
    167a:	88 f0       	brcs	.+34     	; 0x169e <__fixunssfsi+0x28>
    167c:	9f 57       	subi	r25, 0x7F	; 127
    167e:	98 f0       	brcs	.+38     	; 0x16a6 <__fixunssfsi+0x30>
    1680:	b9 2f       	mov	r27, r25
    1682:	99 27       	eor	r25, r25
    1684:	b7 51       	subi	r27, 0x17	; 23
    1686:	b0 f0       	brcs	.+44     	; 0x16b4 <__fixunssfsi+0x3e>
    1688:	e1 f0       	breq	.+56     	; 0x16c2 <__fixunssfsi+0x4c>
    168a:	66 0f       	add	r22, r22
    168c:	77 1f       	adc	r23, r23
    168e:	88 1f       	adc	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	1a f0       	brmi	.+6      	; 0x169a <__fixunssfsi+0x24>
    1694:	ba 95       	dec	r27
    1696:	c9 f7       	brne	.-14     	; 0x168a <__fixunssfsi+0x14>
    1698:	14 c0       	rjmp	.+40     	; 0x16c2 <__fixunssfsi+0x4c>
    169a:	b1 30       	cpi	r27, 0x01	; 1
    169c:	91 f0       	breq	.+36     	; 0x16c2 <__fixunssfsi+0x4c>
    169e:	0e 94 15 0c 	call	0x182a	; 0x182a <__fp_zero>
    16a2:	b1 e0       	ldi	r27, 0x01	; 1
    16a4:	08 95       	ret
    16a6:	0c 94 15 0c 	jmp	0x182a	; 0x182a <__fp_zero>
    16aa:	67 2f       	mov	r22, r23
    16ac:	78 2f       	mov	r23, r24
    16ae:	88 27       	eor	r24, r24
    16b0:	b8 5f       	subi	r27, 0xF8	; 248
    16b2:	39 f0       	breq	.+14     	; 0x16c2 <__fixunssfsi+0x4c>
    16b4:	b9 3f       	cpi	r27, 0xF9	; 249
    16b6:	cc f3       	brlt	.-14     	; 0x16aa <__fixunssfsi+0x34>
    16b8:	86 95       	lsr	r24
    16ba:	77 95       	ror	r23
    16bc:	67 95       	ror	r22
    16be:	b3 95       	inc	r27
    16c0:	d9 f7       	brne	.-10     	; 0x16b8 <__fixunssfsi+0x42>
    16c2:	3e f4       	brtc	.+14     	; 0x16d2 <__fixunssfsi+0x5c>
    16c4:	90 95       	com	r25
    16c6:	80 95       	com	r24
    16c8:	70 95       	com	r23
    16ca:	61 95       	neg	r22
    16cc:	7f 4f       	sbci	r23, 0xFF	; 255
    16ce:	8f 4f       	sbci	r24, 0xFF	; 255
    16d0:	9f 4f       	sbci	r25, 0xFF	; 255
    16d2:	08 95       	ret

000016d4 <__floatunsisf>:
    16d4:	e8 94       	clt
    16d6:	09 c0       	rjmp	.+18     	; 0x16ea <__floatsisf+0x12>

000016d8 <__floatsisf>:
    16d8:	97 fb       	bst	r25, 7
    16da:	3e f4       	brtc	.+14     	; 0x16ea <__floatsisf+0x12>
    16dc:	90 95       	com	r25
    16de:	80 95       	com	r24
    16e0:	70 95       	com	r23
    16e2:	61 95       	neg	r22
    16e4:	7f 4f       	sbci	r23, 0xFF	; 255
    16e6:	8f 4f       	sbci	r24, 0xFF	; 255
    16e8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ea:	99 23       	and	r25, r25
    16ec:	a9 f0       	breq	.+42     	; 0x1718 <__floatsisf+0x40>
    16ee:	f9 2f       	mov	r31, r25
    16f0:	96 e9       	ldi	r25, 0x96	; 150
    16f2:	bb 27       	eor	r27, r27
    16f4:	93 95       	inc	r25
    16f6:	f6 95       	lsr	r31
    16f8:	87 95       	ror	r24
    16fa:	77 95       	ror	r23
    16fc:	67 95       	ror	r22
    16fe:	b7 95       	ror	r27
    1700:	f1 11       	cpse	r31, r1
    1702:	f8 cf       	rjmp	.-16     	; 0x16f4 <__floatsisf+0x1c>
    1704:	fa f4       	brpl	.+62     	; 0x1744 <__floatsisf+0x6c>
    1706:	bb 0f       	add	r27, r27
    1708:	11 f4       	brne	.+4      	; 0x170e <__floatsisf+0x36>
    170a:	60 ff       	sbrs	r22, 0
    170c:	1b c0       	rjmp	.+54     	; 0x1744 <__floatsisf+0x6c>
    170e:	6f 5f       	subi	r22, 0xFF	; 255
    1710:	7f 4f       	sbci	r23, 0xFF	; 255
    1712:	8f 4f       	sbci	r24, 0xFF	; 255
    1714:	9f 4f       	sbci	r25, 0xFF	; 255
    1716:	16 c0       	rjmp	.+44     	; 0x1744 <__floatsisf+0x6c>
    1718:	88 23       	and	r24, r24
    171a:	11 f0       	breq	.+4      	; 0x1720 <__floatsisf+0x48>
    171c:	96 e9       	ldi	r25, 0x96	; 150
    171e:	11 c0       	rjmp	.+34     	; 0x1742 <__floatsisf+0x6a>
    1720:	77 23       	and	r23, r23
    1722:	21 f0       	breq	.+8      	; 0x172c <__floatsisf+0x54>
    1724:	9e e8       	ldi	r25, 0x8E	; 142
    1726:	87 2f       	mov	r24, r23
    1728:	76 2f       	mov	r23, r22
    172a:	05 c0       	rjmp	.+10     	; 0x1736 <__floatsisf+0x5e>
    172c:	66 23       	and	r22, r22
    172e:	71 f0       	breq	.+28     	; 0x174c <__floatsisf+0x74>
    1730:	96 e8       	ldi	r25, 0x86	; 134
    1732:	86 2f       	mov	r24, r22
    1734:	70 e0       	ldi	r23, 0x00	; 0
    1736:	60 e0       	ldi	r22, 0x00	; 0
    1738:	2a f0       	brmi	.+10     	; 0x1744 <__floatsisf+0x6c>
    173a:	9a 95       	dec	r25
    173c:	66 0f       	add	r22, r22
    173e:	77 1f       	adc	r23, r23
    1740:	88 1f       	adc	r24, r24
    1742:	da f7       	brpl	.-10     	; 0x173a <__floatsisf+0x62>
    1744:	88 0f       	add	r24, r24
    1746:	96 95       	lsr	r25
    1748:	87 95       	ror	r24
    174a:	97 f9       	bld	r25, 7
    174c:	08 95       	ret

0000174e <__fp_cmp>:
    174e:	99 0f       	add	r25, r25
    1750:	00 08       	sbc	r0, r0
    1752:	55 0f       	add	r21, r21
    1754:	aa 0b       	sbc	r26, r26
    1756:	e0 e8       	ldi	r30, 0x80	; 128
    1758:	fe ef       	ldi	r31, 0xFE	; 254
    175a:	16 16       	cp	r1, r22
    175c:	17 06       	cpc	r1, r23
    175e:	e8 07       	cpc	r30, r24
    1760:	f9 07       	cpc	r31, r25
    1762:	c0 f0       	brcs	.+48     	; 0x1794 <__fp_cmp+0x46>
    1764:	12 16       	cp	r1, r18
    1766:	13 06       	cpc	r1, r19
    1768:	e4 07       	cpc	r30, r20
    176a:	f5 07       	cpc	r31, r21
    176c:	98 f0       	brcs	.+38     	; 0x1794 <__fp_cmp+0x46>
    176e:	62 1b       	sub	r22, r18
    1770:	73 0b       	sbc	r23, r19
    1772:	84 0b       	sbc	r24, r20
    1774:	95 0b       	sbc	r25, r21
    1776:	39 f4       	brne	.+14     	; 0x1786 <__fp_cmp+0x38>
    1778:	0a 26       	eor	r0, r26
    177a:	61 f0       	breq	.+24     	; 0x1794 <__fp_cmp+0x46>
    177c:	23 2b       	or	r18, r19
    177e:	24 2b       	or	r18, r20
    1780:	25 2b       	or	r18, r21
    1782:	21 f4       	brne	.+8      	; 0x178c <__fp_cmp+0x3e>
    1784:	08 95       	ret
    1786:	0a 26       	eor	r0, r26
    1788:	09 f4       	brne	.+2      	; 0x178c <__fp_cmp+0x3e>
    178a:	a1 40       	sbci	r26, 0x01	; 1
    178c:	a6 95       	lsr	r26
    178e:	8f ef       	ldi	r24, 0xFF	; 255
    1790:	81 1d       	adc	r24, r1
    1792:	81 1d       	adc	r24, r1
    1794:	08 95       	ret

00001796 <__fp_inf>:
    1796:	97 f9       	bld	r25, 7
    1798:	9f 67       	ori	r25, 0x7F	; 127
    179a:	80 e8       	ldi	r24, 0x80	; 128
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	08 95       	ret

000017a2 <__fp_nan>:
    17a2:	9f ef       	ldi	r25, 0xFF	; 255
    17a4:	80 ec       	ldi	r24, 0xC0	; 192
    17a6:	08 95       	ret

000017a8 <__fp_pscA>:
    17a8:	00 24       	eor	r0, r0
    17aa:	0a 94       	dec	r0
    17ac:	16 16       	cp	r1, r22
    17ae:	17 06       	cpc	r1, r23
    17b0:	18 06       	cpc	r1, r24
    17b2:	09 06       	cpc	r0, r25
    17b4:	08 95       	ret

000017b6 <__fp_pscB>:
    17b6:	00 24       	eor	r0, r0
    17b8:	0a 94       	dec	r0
    17ba:	12 16       	cp	r1, r18
    17bc:	13 06       	cpc	r1, r19
    17be:	14 06       	cpc	r1, r20
    17c0:	05 06       	cpc	r0, r21
    17c2:	08 95       	ret

000017c4 <__fp_round>:
    17c4:	09 2e       	mov	r0, r25
    17c6:	03 94       	inc	r0
    17c8:	00 0c       	add	r0, r0
    17ca:	11 f4       	brne	.+4      	; 0x17d0 <__fp_round+0xc>
    17cc:	88 23       	and	r24, r24
    17ce:	52 f0       	brmi	.+20     	; 0x17e4 <__fp_round+0x20>
    17d0:	bb 0f       	add	r27, r27
    17d2:	40 f4       	brcc	.+16     	; 0x17e4 <__fp_round+0x20>
    17d4:	bf 2b       	or	r27, r31
    17d6:	11 f4       	brne	.+4      	; 0x17dc <__fp_round+0x18>
    17d8:	60 ff       	sbrs	r22, 0
    17da:	04 c0       	rjmp	.+8      	; 0x17e4 <__fp_round+0x20>
    17dc:	6f 5f       	subi	r22, 0xFF	; 255
    17de:	7f 4f       	sbci	r23, 0xFF	; 255
    17e0:	8f 4f       	sbci	r24, 0xFF	; 255
    17e2:	9f 4f       	sbci	r25, 0xFF	; 255
    17e4:	08 95       	ret

000017e6 <__fp_split3>:
    17e6:	57 fd       	sbrc	r21, 7
    17e8:	90 58       	subi	r25, 0x80	; 128
    17ea:	44 0f       	add	r20, r20
    17ec:	55 1f       	adc	r21, r21
    17ee:	59 f0       	breq	.+22     	; 0x1806 <__fp_splitA+0x10>
    17f0:	5f 3f       	cpi	r21, 0xFF	; 255
    17f2:	71 f0       	breq	.+28     	; 0x1810 <__fp_splitA+0x1a>
    17f4:	47 95       	ror	r20

000017f6 <__fp_splitA>:
    17f6:	88 0f       	add	r24, r24
    17f8:	97 fb       	bst	r25, 7
    17fa:	99 1f       	adc	r25, r25
    17fc:	61 f0       	breq	.+24     	; 0x1816 <__fp_splitA+0x20>
    17fe:	9f 3f       	cpi	r25, 0xFF	; 255
    1800:	79 f0       	breq	.+30     	; 0x1820 <__fp_splitA+0x2a>
    1802:	87 95       	ror	r24
    1804:	08 95       	ret
    1806:	12 16       	cp	r1, r18
    1808:	13 06       	cpc	r1, r19
    180a:	14 06       	cpc	r1, r20
    180c:	55 1f       	adc	r21, r21
    180e:	f2 cf       	rjmp	.-28     	; 0x17f4 <__fp_split3+0xe>
    1810:	46 95       	lsr	r20
    1812:	f1 df       	rcall	.-30     	; 0x17f6 <__fp_splitA>
    1814:	08 c0       	rjmp	.+16     	; 0x1826 <__fp_splitA+0x30>
    1816:	16 16       	cp	r1, r22
    1818:	17 06       	cpc	r1, r23
    181a:	18 06       	cpc	r1, r24
    181c:	99 1f       	adc	r25, r25
    181e:	f1 cf       	rjmp	.-30     	; 0x1802 <__fp_splitA+0xc>
    1820:	86 95       	lsr	r24
    1822:	71 05       	cpc	r23, r1
    1824:	61 05       	cpc	r22, r1
    1826:	08 94       	sec
    1828:	08 95       	ret

0000182a <__fp_zero>:
    182a:	e8 94       	clt

0000182c <__fp_szero>:
    182c:	bb 27       	eor	r27, r27
    182e:	66 27       	eor	r22, r22
    1830:	77 27       	eor	r23, r23
    1832:	cb 01       	movw	r24, r22
    1834:	97 f9       	bld	r25, 7
    1836:	08 95       	ret

00001838 <__gesf2>:
    1838:	0e 94 a7 0b 	call	0x174e	; 0x174e <__fp_cmp>
    183c:	08 f4       	brcc	.+2      	; 0x1840 <__gesf2+0x8>
    183e:	8f ef       	ldi	r24, 0xFF	; 255
    1840:	08 95       	ret

00001842 <__mulsf3>:
    1842:	0e 94 34 0c 	call	0x1868	; 0x1868 <__mulsf3x>
    1846:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <__fp_round>
    184a:	0e 94 d4 0b 	call	0x17a8	; 0x17a8 <__fp_pscA>
    184e:	38 f0       	brcs	.+14     	; 0x185e <__mulsf3+0x1c>
    1850:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <__fp_pscB>
    1854:	20 f0       	brcs	.+8      	; 0x185e <__mulsf3+0x1c>
    1856:	95 23       	and	r25, r21
    1858:	11 f0       	breq	.+4      	; 0x185e <__mulsf3+0x1c>
    185a:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__fp_inf>
    185e:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__fp_nan>
    1862:	11 24       	eor	r1, r1
    1864:	0c 94 16 0c 	jmp	0x182c	; 0x182c <__fp_szero>

00001868 <__mulsf3x>:
    1868:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <__fp_split3>
    186c:	70 f3       	brcs	.-36     	; 0x184a <__mulsf3+0x8>

0000186e <__mulsf3_pse>:
    186e:	95 9f       	mul	r25, r21
    1870:	c1 f3       	breq	.-16     	; 0x1862 <__mulsf3+0x20>
    1872:	95 0f       	add	r25, r21
    1874:	50 e0       	ldi	r21, 0x00	; 0
    1876:	55 1f       	adc	r21, r21
    1878:	62 9f       	mul	r22, r18
    187a:	f0 01       	movw	r30, r0
    187c:	72 9f       	mul	r23, r18
    187e:	bb 27       	eor	r27, r27
    1880:	f0 0d       	add	r31, r0
    1882:	b1 1d       	adc	r27, r1
    1884:	63 9f       	mul	r22, r19
    1886:	aa 27       	eor	r26, r26
    1888:	f0 0d       	add	r31, r0
    188a:	b1 1d       	adc	r27, r1
    188c:	aa 1f       	adc	r26, r26
    188e:	64 9f       	mul	r22, r20
    1890:	66 27       	eor	r22, r22
    1892:	b0 0d       	add	r27, r0
    1894:	a1 1d       	adc	r26, r1
    1896:	66 1f       	adc	r22, r22
    1898:	82 9f       	mul	r24, r18
    189a:	22 27       	eor	r18, r18
    189c:	b0 0d       	add	r27, r0
    189e:	a1 1d       	adc	r26, r1
    18a0:	62 1f       	adc	r22, r18
    18a2:	73 9f       	mul	r23, r19
    18a4:	b0 0d       	add	r27, r0
    18a6:	a1 1d       	adc	r26, r1
    18a8:	62 1f       	adc	r22, r18
    18aa:	83 9f       	mul	r24, r19
    18ac:	a0 0d       	add	r26, r0
    18ae:	61 1d       	adc	r22, r1
    18b0:	22 1f       	adc	r18, r18
    18b2:	74 9f       	mul	r23, r20
    18b4:	33 27       	eor	r19, r19
    18b6:	a0 0d       	add	r26, r0
    18b8:	61 1d       	adc	r22, r1
    18ba:	23 1f       	adc	r18, r19
    18bc:	84 9f       	mul	r24, r20
    18be:	60 0d       	add	r22, r0
    18c0:	21 1d       	adc	r18, r1
    18c2:	82 2f       	mov	r24, r18
    18c4:	76 2f       	mov	r23, r22
    18c6:	6a 2f       	mov	r22, r26
    18c8:	11 24       	eor	r1, r1
    18ca:	9f 57       	subi	r25, 0x7F	; 127
    18cc:	50 40       	sbci	r21, 0x00	; 0
    18ce:	9a f0       	brmi	.+38     	; 0x18f6 <__mulsf3_pse+0x88>
    18d0:	f1 f0       	breq	.+60     	; 0x190e <__mulsf3_pse+0xa0>
    18d2:	88 23       	and	r24, r24
    18d4:	4a f0       	brmi	.+18     	; 0x18e8 <__mulsf3_pse+0x7a>
    18d6:	ee 0f       	add	r30, r30
    18d8:	ff 1f       	adc	r31, r31
    18da:	bb 1f       	adc	r27, r27
    18dc:	66 1f       	adc	r22, r22
    18de:	77 1f       	adc	r23, r23
    18e0:	88 1f       	adc	r24, r24
    18e2:	91 50       	subi	r25, 0x01	; 1
    18e4:	50 40       	sbci	r21, 0x00	; 0
    18e6:	a9 f7       	brne	.-22     	; 0x18d2 <__mulsf3_pse+0x64>
    18e8:	9e 3f       	cpi	r25, 0xFE	; 254
    18ea:	51 05       	cpc	r21, r1
    18ec:	80 f0       	brcs	.+32     	; 0x190e <__mulsf3_pse+0xa0>
    18ee:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <__fp_inf>
    18f2:	0c 94 16 0c 	jmp	0x182c	; 0x182c <__fp_szero>
    18f6:	5f 3f       	cpi	r21, 0xFF	; 255
    18f8:	e4 f3       	brlt	.-8      	; 0x18f2 <__mulsf3_pse+0x84>
    18fa:	98 3e       	cpi	r25, 0xE8	; 232
    18fc:	d4 f3       	brlt	.-12     	; 0x18f2 <__mulsf3_pse+0x84>
    18fe:	86 95       	lsr	r24
    1900:	77 95       	ror	r23
    1902:	67 95       	ror	r22
    1904:	b7 95       	ror	r27
    1906:	f7 95       	ror	r31
    1908:	e7 95       	ror	r30
    190a:	9f 5f       	subi	r25, 0xFF	; 255
    190c:	c1 f7       	brne	.-16     	; 0x18fe <__mulsf3_pse+0x90>
    190e:	fe 2b       	or	r31, r30
    1910:	88 0f       	add	r24, r24
    1912:	91 1d       	adc	r25, r1
    1914:	96 95       	lsr	r25
    1916:	87 95       	ror	r24
    1918:	97 f9       	bld	r25, 7
    191a:	08 95       	ret

0000191c <round>:
    191c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <__fp_splitA>
    1920:	e8 f0       	brcs	.+58     	; 0x195c <round+0x40>
    1922:	9e 37       	cpi	r25, 0x7E	; 126
    1924:	e8 f0       	brcs	.+58     	; 0x1960 <round+0x44>
    1926:	96 39       	cpi	r25, 0x96	; 150
    1928:	b8 f4       	brcc	.+46     	; 0x1958 <round+0x3c>
    192a:	9e 38       	cpi	r25, 0x8E	; 142
    192c:	48 f4       	brcc	.+18     	; 0x1940 <round+0x24>
    192e:	67 2f       	mov	r22, r23
    1930:	78 2f       	mov	r23, r24
    1932:	88 27       	eor	r24, r24
    1934:	98 5f       	subi	r25, 0xF8	; 248
    1936:	f9 cf       	rjmp	.-14     	; 0x192a <round+0xe>
    1938:	86 95       	lsr	r24
    193a:	77 95       	ror	r23
    193c:	67 95       	ror	r22
    193e:	93 95       	inc	r25
    1940:	95 39       	cpi	r25, 0x95	; 149
    1942:	d0 f3       	brcs	.-12     	; 0x1938 <round+0x1c>
    1944:	b6 2f       	mov	r27, r22
    1946:	b1 70       	andi	r27, 0x01	; 1
    1948:	6b 0f       	add	r22, r27
    194a:	71 1d       	adc	r23, r1
    194c:	81 1d       	adc	r24, r1
    194e:	20 f4       	brcc	.+8      	; 0x1958 <round+0x3c>
    1950:	87 95       	ror	r24
    1952:	77 95       	ror	r23
    1954:	67 95       	ror	r22
    1956:	93 95       	inc	r25
    1958:	0c 94 b2 0c 	jmp	0x1964	; 0x1964 <__fp_mintl>
    195c:	0c 94 cd 0c 	jmp	0x199a	; 0x199a <__fp_mpack>
    1960:	0c 94 16 0c 	jmp	0x182c	; 0x182c <__fp_szero>

00001964 <__fp_mintl>:
    1964:	88 23       	and	r24, r24
    1966:	71 f4       	brne	.+28     	; 0x1984 <__fp_mintl+0x20>
    1968:	77 23       	and	r23, r23
    196a:	21 f0       	breq	.+8      	; 0x1974 <__fp_mintl+0x10>
    196c:	98 50       	subi	r25, 0x08	; 8
    196e:	87 2b       	or	r24, r23
    1970:	76 2f       	mov	r23, r22
    1972:	07 c0       	rjmp	.+14     	; 0x1982 <__fp_mintl+0x1e>
    1974:	66 23       	and	r22, r22
    1976:	11 f4       	brne	.+4      	; 0x197c <__fp_mintl+0x18>
    1978:	99 27       	eor	r25, r25
    197a:	0d c0       	rjmp	.+26     	; 0x1996 <__fp_mintl+0x32>
    197c:	90 51       	subi	r25, 0x10	; 16
    197e:	86 2b       	or	r24, r22
    1980:	70 e0       	ldi	r23, 0x00	; 0
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	2a f0       	brmi	.+10     	; 0x1990 <__fp_mintl+0x2c>
    1986:	9a 95       	dec	r25
    1988:	66 0f       	add	r22, r22
    198a:	77 1f       	adc	r23, r23
    198c:	88 1f       	adc	r24, r24
    198e:	da f7       	brpl	.-10     	; 0x1986 <__fp_mintl+0x22>
    1990:	88 0f       	add	r24, r24
    1992:	96 95       	lsr	r25
    1994:	87 95       	ror	r24
    1996:	97 f9       	bld	r25, 7
    1998:	08 95       	ret

0000199a <__fp_mpack>:
    199a:	9f 3f       	cpi	r25, 0xFF	; 255
    199c:	31 f0       	breq	.+12     	; 0x19aa <__fp_mpack_finite+0xc>

0000199e <__fp_mpack_finite>:
    199e:	91 50       	subi	r25, 0x01	; 1
    19a0:	20 f4       	brcc	.+8      	; 0x19aa <__fp_mpack_finite+0xc>
    19a2:	87 95       	ror	r24
    19a4:	77 95       	ror	r23
    19a6:	67 95       	ror	r22
    19a8:	b7 95       	ror	r27
    19aa:	88 0f       	add	r24, r24
    19ac:	91 1d       	adc	r25, r1
    19ae:	96 95       	lsr	r25
    19b0:	87 95       	ror	r24
    19b2:	97 f9       	bld	r25, 7
    19b4:	08 95       	ret

000019b6 <__divmodhi4>:
    19b6:	97 fb       	bst	r25, 7
    19b8:	07 2e       	mov	r0, r23
    19ba:	16 f4       	brtc	.+4      	; 0x19c0 <__divmodhi4+0xa>
    19bc:	00 94       	com	r0
    19be:	07 d0       	rcall	.+14     	; 0x19ce <__divmodhi4_neg1>
    19c0:	77 fd       	sbrc	r23, 7
    19c2:	09 d0       	rcall	.+18     	; 0x19d6 <__divmodhi4_neg2>
    19c4:	0e 94 fe 0c 	call	0x19fc	; 0x19fc <__udivmodhi4>
    19c8:	07 fc       	sbrc	r0, 7
    19ca:	05 d0       	rcall	.+10     	; 0x19d6 <__divmodhi4_neg2>
    19cc:	3e f4       	brtc	.+14     	; 0x19dc <__divmodhi4_exit>

000019ce <__divmodhi4_neg1>:
    19ce:	90 95       	com	r25
    19d0:	81 95       	neg	r24
    19d2:	9f 4f       	sbci	r25, 0xFF	; 255
    19d4:	08 95       	ret

000019d6 <__divmodhi4_neg2>:
    19d6:	70 95       	com	r23
    19d8:	61 95       	neg	r22
    19da:	7f 4f       	sbci	r23, 0xFF	; 255

000019dc <__divmodhi4_exit>:
    19dc:	08 95       	ret

000019de <__umulhisi3>:
    19de:	a2 9f       	mul	r26, r18
    19e0:	b0 01       	movw	r22, r0
    19e2:	b3 9f       	mul	r27, r19
    19e4:	c0 01       	movw	r24, r0
    19e6:	a3 9f       	mul	r26, r19
    19e8:	70 0d       	add	r23, r0
    19ea:	81 1d       	adc	r24, r1
    19ec:	11 24       	eor	r1, r1
    19ee:	91 1d       	adc	r25, r1
    19f0:	b2 9f       	mul	r27, r18
    19f2:	70 0d       	add	r23, r0
    19f4:	81 1d       	adc	r24, r1
    19f6:	11 24       	eor	r1, r1
    19f8:	91 1d       	adc	r25, r1
    19fa:	08 95       	ret

000019fc <__udivmodhi4>:
    19fc:	aa 1b       	sub	r26, r26
    19fe:	bb 1b       	sub	r27, r27
    1a00:	51 e1       	ldi	r21, 0x11	; 17
    1a02:	07 c0       	rjmp	.+14     	; 0x1a12 <__udivmodhi4_ep>

00001a04 <__udivmodhi4_loop>:
    1a04:	aa 1f       	adc	r26, r26
    1a06:	bb 1f       	adc	r27, r27
    1a08:	a6 17       	cp	r26, r22
    1a0a:	b7 07       	cpc	r27, r23
    1a0c:	10 f0       	brcs	.+4      	; 0x1a12 <__udivmodhi4_ep>
    1a0e:	a6 1b       	sub	r26, r22
    1a10:	b7 0b       	sbc	r27, r23

00001a12 <__udivmodhi4_ep>:
    1a12:	88 1f       	adc	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	5a 95       	dec	r21
    1a18:	a9 f7       	brne	.-22     	; 0x1a04 <__udivmodhi4_loop>
    1a1a:	80 95       	com	r24
    1a1c:	90 95       	com	r25
    1a1e:	bc 01       	movw	r22, r24
    1a20:	cd 01       	movw	r24, r26
    1a22:	08 95       	ret

00001a24 <__tablejump2__>:
    1a24:	ee 0f       	add	r30, r30
    1a26:	ff 1f       	adc	r31, r31
    1a28:	05 90       	lpm	r0, Z+
    1a2a:	f4 91       	lpm	r31, Z
    1a2c:	e0 2d       	mov	r30, r0
    1a2e:	09 94       	ijmp

00001a30 <atof>:
    1a30:	66 27       	eor	r22, r22
    1a32:	77 27       	eor	r23, r23
    1a34:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <strtod>

00001a38 <strcmp>:
    1a38:	fb 01       	movw	r30, r22
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	8d 91       	ld	r24, X+
    1a3e:	01 90       	ld	r0, Z+
    1a40:	80 19       	sub	r24, r0
    1a42:	01 10       	cpse	r0, r1
    1a44:	d9 f3       	breq	.-10     	; 0x1a3c <strcmp+0x4>
    1a46:	99 0b       	sbc	r25, r25
    1a48:	08 95       	ret

00001a4a <strtod>:
    1a4a:	a0 e0       	ldi	r26, 0x00	; 0
    1a4c:	b0 e0       	ldi	r27, 0x00	; 0
    1a4e:	eb e2       	ldi	r30, 0x2B	; 43
    1a50:	fd e0       	ldi	r31, 0x0D	; 13
    1a52:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__prologue_saves__+0xc>
    1a56:	ec 01       	movw	r28, r24
    1a58:	6b 01       	movw	r12, r22
    1a5a:	61 15       	cp	r22, r1
    1a5c:	71 05       	cpc	r23, r1
    1a5e:	19 f0       	breq	.+6      	; 0x1a66 <strtod+0x1c>
    1a60:	fb 01       	movw	r30, r22
    1a62:	91 83       	std	Z+1, r25	; 0x01
    1a64:	80 83       	st	Z, r24
    1a66:	7e 01       	movw	r14, r28
    1a68:	ff ef       	ldi	r31, 0xFF	; 255
    1a6a:	ef 1a       	sub	r14, r31
    1a6c:	ff 0a       	sbc	r15, r31
    1a6e:	08 81       	ld	r16, Y
    1a70:	80 2f       	mov	r24, r16
    1a72:	90 e0       	ldi	r25, 0x00	; 0
    1a74:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <isspace>
    1a78:	89 2b       	or	r24, r25
    1a7a:	11 f0       	breq	.+4      	; 0x1a80 <strtod+0x36>
    1a7c:	e7 01       	movw	r28, r14
    1a7e:	f3 cf       	rjmp	.-26     	; 0x1a66 <strtod+0x1c>
    1a80:	0d 32       	cpi	r16, 0x2D	; 45
    1a82:	39 f4       	brne	.+14     	; 0x1a92 <strtod+0x48>
    1a84:	7e 01       	movw	r14, r28
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	e8 0e       	add	r14, r24
    1a8a:	f1 1c       	adc	r15, r1
    1a8c:	09 81       	ldd	r16, Y+1	; 0x01
    1a8e:	11 e0       	ldi	r17, 0x01	; 1
    1a90:	08 c0       	rjmp	.+16     	; 0x1aa2 <strtod+0x58>
    1a92:	0b 32       	cpi	r16, 0x2B	; 43
    1a94:	29 f4       	brne	.+10     	; 0x1aa0 <strtod+0x56>
    1a96:	7e 01       	movw	r14, r28
    1a98:	92 e0       	ldi	r25, 0x02	; 2
    1a9a:	e9 0e       	add	r14, r25
    1a9c:	f1 1c       	adc	r15, r1
    1a9e:	09 81       	ldd	r16, Y+1	; 0x01
    1aa0:	10 e0       	ldi	r17, 0x00	; 0
    1aa2:	e7 01       	movw	r28, r14
    1aa4:	21 97       	sbiw	r28, 0x01	; 1
    1aa6:	43 e0       	ldi	r20, 0x03	; 3
    1aa8:	50 e0       	ldi	r21, 0x00	; 0
    1aaa:	60 e7       	ldi	r22, 0x70	; 112
    1aac:	70 e0       	ldi	r23, 0x00	; 0
    1aae:	ce 01       	movw	r24, r28
    1ab0:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <strncasecmp_P>
    1ab4:	89 2b       	or	r24, r25
    1ab6:	c1 f4       	brne	.+48     	; 0x1ae8 <strtod+0x9e>
    1ab8:	23 96       	adiw	r28, 0x03	; 3
    1aba:	45 e0       	ldi	r20, 0x05	; 5
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	6b e6       	ldi	r22, 0x6B	; 107
    1ac0:	70 e0       	ldi	r23, 0x00	; 0
    1ac2:	ce 01       	movw	r24, r28
    1ac4:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <strncasecmp_P>
    1ac8:	89 2b       	or	r24, r25
    1aca:	09 f4       	brne	.+2      	; 0x1ace <strtod+0x84>
    1acc:	25 96       	adiw	r28, 0x05	; 5
    1ace:	c1 14       	cp	r12, r1
    1ad0:	d1 04       	cpc	r13, r1
    1ad2:	19 f0       	breq	.+6      	; 0x1ada <strtod+0x90>
    1ad4:	f6 01       	movw	r30, r12
    1ad6:	d1 83       	std	Z+1, r29	; 0x01
    1ad8:	c0 83       	st	Z, r28
    1ada:	11 11       	cpse	r17, r1
    1adc:	f6 c0       	rjmp	.+492    	; 0x1cca <strtod+0x280>
    1ade:	60 e0       	ldi	r22, 0x00	; 0
    1ae0:	70 e0       	ldi	r23, 0x00	; 0
    1ae2:	80 e8       	ldi	r24, 0x80	; 128
    1ae4:	9f e7       	ldi	r25, 0x7F	; 127
    1ae6:	fa c0       	rjmp	.+500    	; 0x1cdc <strtod+0x292>
    1ae8:	43 e0       	ldi	r20, 0x03	; 3
    1aea:	50 e0       	ldi	r21, 0x00	; 0
    1aec:	68 e6       	ldi	r22, 0x68	; 104
    1aee:	70 e0       	ldi	r23, 0x00	; 0
    1af0:	ce 01       	movw	r24, r28
    1af2:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <strncasecmp_P>
    1af6:	89 2b       	or	r24, r25
    1af8:	59 f4       	brne	.+22     	; 0x1b10 <strtod+0xc6>
    1afa:	c1 14       	cp	r12, r1
    1afc:	d1 04       	cpc	r13, r1
    1afe:	09 f4       	brne	.+2      	; 0x1b02 <strtod+0xb8>
    1b00:	e9 c0       	rjmp	.+466    	; 0x1cd4 <strtod+0x28a>
    1b02:	f2 e0       	ldi	r31, 0x02	; 2
    1b04:	ef 0e       	add	r14, r31
    1b06:	f1 1c       	adc	r15, r1
    1b08:	f6 01       	movw	r30, r12
    1b0a:	f1 82       	std	Z+1, r15	; 0x01
    1b0c:	e0 82       	st	Z, r14
    1b0e:	e2 c0       	rjmp	.+452    	; 0x1cd4 <strtod+0x28a>
    1b10:	20 e0       	ldi	r18, 0x00	; 0
    1b12:	30 e0       	ldi	r19, 0x00	; 0
    1b14:	a9 01       	movw	r20, r18
    1b16:	c0 e0       	ldi	r28, 0x00	; 0
    1b18:	d0 e0       	ldi	r29, 0x00	; 0
    1b1a:	f7 01       	movw	r30, r14
    1b1c:	80 ed       	ldi	r24, 0xD0	; 208
    1b1e:	a8 2e       	mov	r10, r24
    1b20:	a0 0e       	add	r10, r16
    1b22:	89 e0       	ldi	r24, 0x09	; 9
    1b24:	8a 15       	cp	r24, r10
    1b26:	30 f1       	brcs	.+76     	; 0x1b74 <strtod+0x12a>
    1b28:	91 2f       	mov	r25, r17
    1b2a:	92 60       	ori	r25, 0x02	; 2
    1b2c:	b9 2e       	mov	r11, r25
    1b2e:	81 2f       	mov	r24, r17
    1b30:	88 70       	andi	r24, 0x08	; 8
    1b32:	12 ff       	sbrs	r17, 2
    1b34:	04 c0       	rjmp	.+8      	; 0x1b3e <strtod+0xf4>
    1b36:	81 11       	cpse	r24, r1
    1b38:	24 c0       	rjmp	.+72     	; 0x1b82 <strtod+0x138>
    1b3a:	21 96       	adiw	r28, 0x01	; 1
    1b3c:	22 c0       	rjmp	.+68     	; 0x1b82 <strtod+0x138>
    1b3e:	81 11       	cpse	r24, r1
    1b40:	21 97       	sbiw	r28, 0x01	; 1
    1b42:	a5 e0       	ldi	r26, 0x05	; 5
    1b44:	b0 e0       	ldi	r27, 0x00	; 0
    1b46:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <__muluhisi3>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	88 0f       	add	r24, r24
    1b50:	99 1f       	adc	r25, r25
    1b52:	aa 1f       	adc	r26, r26
    1b54:	bb 1f       	adc	r27, r27
    1b56:	9c 01       	movw	r18, r24
    1b58:	ad 01       	movw	r20, r26
    1b5a:	2a 0d       	add	r18, r10
    1b5c:	31 1d       	adc	r19, r1
    1b5e:	41 1d       	adc	r20, r1
    1b60:	51 1d       	adc	r21, r1
    1b62:	28 39       	cpi	r18, 0x98	; 152
    1b64:	89 e9       	ldi	r24, 0x99	; 153
    1b66:	38 07       	cpc	r19, r24
    1b68:	48 07       	cpc	r20, r24
    1b6a:	89 e1       	ldi	r24, 0x19	; 25
    1b6c:	58 07       	cpc	r21, r24
    1b6e:	48 f0       	brcs	.+18     	; 0x1b82 <strtod+0x138>
    1b70:	16 60       	ori	r17, 0x06	; 6
    1b72:	06 c0       	rjmp	.+12     	; 0x1b80 <strtod+0x136>
    1b74:	9e ef       	ldi	r25, 0xFE	; 254
    1b76:	a9 12       	cpse	r10, r25
    1b78:	0a c0       	rjmp	.+20     	; 0x1b8e <strtod+0x144>
    1b7a:	13 fd       	sbrc	r17, 3
    1b7c:	40 c0       	rjmp	.+128    	; 0x1bfe <strtod+0x1b4>
    1b7e:	18 60       	ori	r17, 0x08	; 8
    1b80:	b1 2e       	mov	r11, r17
    1b82:	8f ef       	ldi	r24, 0xFF	; 255
    1b84:	e8 1a       	sub	r14, r24
    1b86:	f8 0a       	sbc	r15, r24
    1b88:	00 81       	ld	r16, Z
    1b8a:	1b 2d       	mov	r17, r11
    1b8c:	c6 cf       	rjmp	.-116    	; 0x1b1a <strtod+0xd0>
    1b8e:	80 2f       	mov	r24, r16
    1b90:	8f 7d       	andi	r24, 0xDF	; 223
    1b92:	85 34       	cpi	r24, 0x45	; 69
    1b94:	a1 f5       	brne	.+104    	; 0x1bfe <strtod+0x1b4>
    1b96:	80 81       	ld	r24, Z
    1b98:	8d 32       	cpi	r24, 0x2D	; 45
    1b9a:	11 f4       	brne	.+4      	; 0x1ba0 <strtod+0x156>
    1b9c:	10 61       	ori	r17, 0x10	; 16
    1b9e:	06 c0       	rjmp	.+12     	; 0x1bac <strtod+0x162>
    1ba0:	8b 32       	cpi	r24, 0x2B	; 43
    1ba2:	21 f0       	breq	.+8      	; 0x1bac <strtod+0x162>
    1ba4:	31 96       	adiw	r30, 0x01	; 1
    1ba6:	61 e0       	ldi	r22, 0x01	; 1
    1ba8:	70 e0       	ldi	r23, 0x00	; 0
    1baa:	04 c0       	rjmp	.+8      	; 0x1bb4 <strtod+0x16a>
    1bac:	81 81       	ldd	r24, Z+1	; 0x01
    1bae:	32 96       	adiw	r30, 0x02	; 2
    1bb0:	62 e0       	ldi	r22, 0x02	; 2
    1bb2:	70 e0       	ldi	r23, 0x00	; 0
    1bb4:	80 53       	subi	r24, 0x30	; 48
    1bb6:	8a 30       	cpi	r24, 0x0A	; 10
    1bb8:	18 f0       	brcs	.+6      	; 0x1bc0 <strtod+0x176>
    1bba:	e6 1b       	sub	r30, r22
    1bbc:	f7 0b       	sbc	r31, r23
    1bbe:	1f c0       	rjmp	.+62     	; 0x1bfe <strtod+0x1b4>
    1bc0:	60 e0       	ldi	r22, 0x00	; 0
    1bc2:	70 e0       	ldi	r23, 0x00	; 0
    1bc4:	60 38       	cpi	r22, 0x80	; 128
    1bc6:	9c e0       	ldi	r25, 0x0C	; 12
    1bc8:	79 07       	cpc	r23, r25
    1bca:	5c f4       	brge	.+22     	; 0x1be2 <strtod+0x198>
    1bcc:	db 01       	movw	r26, r22
    1bce:	aa 0f       	add	r26, r26
    1bd0:	bb 1f       	adc	r27, r27
    1bd2:	aa 0f       	add	r26, r26
    1bd4:	bb 1f       	adc	r27, r27
    1bd6:	6a 0f       	add	r22, r26
    1bd8:	7b 1f       	adc	r23, r27
    1bda:	66 0f       	add	r22, r22
    1bdc:	77 1f       	adc	r23, r23
    1bde:	68 0f       	add	r22, r24
    1be0:	71 1d       	adc	r23, r1
    1be2:	31 96       	adiw	r30, 0x01	; 1
    1be4:	df 01       	movw	r26, r30
    1be6:	11 97       	sbiw	r26, 0x01	; 1
    1be8:	8c 91       	ld	r24, X
    1bea:	80 53       	subi	r24, 0x30	; 48
    1bec:	8a 30       	cpi	r24, 0x0A	; 10
    1bee:	50 f3       	brcs	.-44     	; 0x1bc4 <strtod+0x17a>
    1bf0:	14 ff       	sbrs	r17, 4
    1bf2:	03 c0       	rjmp	.+6      	; 0x1bfa <strtod+0x1b0>
    1bf4:	71 95       	neg	r23
    1bf6:	61 95       	neg	r22
    1bf8:	71 09       	sbc	r23, r1
    1bfa:	c6 0f       	add	r28, r22
    1bfc:	d7 1f       	adc	r29, r23
    1bfe:	11 ff       	sbrs	r17, 1
    1c00:	08 c0       	rjmp	.+16     	; 0x1c12 <strtod+0x1c8>
    1c02:	c1 14       	cp	r12, r1
    1c04:	d1 04       	cpc	r13, r1
    1c06:	29 f0       	breq	.+10     	; 0x1c12 <strtod+0x1c8>
    1c08:	cf 01       	movw	r24, r30
    1c0a:	01 97       	sbiw	r24, 0x01	; 1
    1c0c:	f6 01       	movw	r30, r12
    1c0e:	91 83       	std	Z+1, r25	; 0x01
    1c10:	80 83       	st	Z, r24
    1c12:	ca 01       	movw	r24, r20
    1c14:	b9 01       	movw	r22, r18
    1c16:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__floatunsisf>
    1c1a:	21 2f       	mov	r18, r17
    1c1c:	23 70       	andi	r18, 0x03	; 3
    1c1e:	23 30       	cpi	r18, 0x03	; 3
    1c20:	19 f0       	breq	.+6      	; 0x1c28 <strtod+0x1de>
    1c22:	4b 01       	movw	r8, r22
    1c24:	5c 01       	movw	r10, r24
    1c26:	06 c0       	rjmp	.+12     	; 0x1c34 <strtod+0x1ea>
    1c28:	4b 01       	movw	r8, r22
    1c2a:	5c 01       	movw	r10, r24
    1c2c:	b7 fa       	bst	r11, 7
    1c2e:	b0 94       	com	r11
    1c30:	b7 f8       	bld	r11, 7
    1c32:	b0 94       	com	r11
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	a9 01       	movw	r20, r18
    1c3a:	c5 01       	movw	r24, r10
    1c3c:	b4 01       	movw	r22, r8
    1c3e:	0e 94 bd 0a 	call	0x157a	; 0x157a <__cmpsf2>
    1c42:	88 23       	and	r24, r24
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <strtod+0x1fe>
    1c46:	3e c0       	rjmp	.+124    	; 0x1cc4 <strtod+0x27a>
    1c48:	d7 ff       	sbrs	r29, 7
    1c4a:	06 c0       	rjmp	.+12     	; 0x1c58 <strtod+0x20e>
    1c4c:	d1 95       	neg	r29
    1c4e:	c1 95       	neg	r28
    1c50:	d1 09       	sbc	r29, r1
    1c52:	07 e8       	ldi	r16, 0x87	; 135
    1c54:	10 e0       	ldi	r17, 0x00	; 0
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <strtod+0x212>
    1c58:	0f e9       	ldi	r16, 0x9F	; 159
    1c5a:	10 e0       	ldi	r17, 0x00	; 0
    1c5c:	68 01       	movw	r12, r16
    1c5e:	f8 e1       	ldi	r31, 0x18	; 24
    1c60:	cf 1a       	sub	r12, r31
    1c62:	d1 08       	sbc	r13, r1
    1c64:	90 e2       	ldi	r25, 0x20	; 32
    1c66:	e9 2e       	mov	r14, r25
    1c68:	f1 2c       	mov	r15, r1
    1c6a:	ce 15       	cp	r28, r14
    1c6c:	df 05       	cpc	r29, r15
    1c6e:	74 f0       	brlt	.+28     	; 0x1c8c <strtod+0x242>
    1c70:	f8 01       	movw	r30, r16
    1c72:	25 91       	lpm	r18, Z+
    1c74:	35 91       	lpm	r19, Z+
    1c76:	45 91       	lpm	r20, Z+
    1c78:	54 91       	lpm	r21, Z
    1c7a:	c5 01       	movw	r24, r10
    1c7c:	b4 01       	movw	r22, r8
    1c7e:	0e 94 21 0c 	call	0x1842	; 0x1842 <__mulsf3>
    1c82:	4b 01       	movw	r8, r22
    1c84:	5c 01       	movw	r10, r24
    1c86:	ce 19       	sub	r28, r14
    1c88:	df 09       	sbc	r29, r15
    1c8a:	ef cf       	rjmp	.-34     	; 0x1c6a <strtod+0x220>
    1c8c:	04 50       	subi	r16, 0x04	; 4
    1c8e:	11 09       	sbc	r17, r1
    1c90:	f5 94       	asr	r15
    1c92:	e7 94       	ror	r14
    1c94:	0c 15       	cp	r16, r12
    1c96:	1d 05       	cpc	r17, r13
    1c98:	41 f7       	brne	.-48     	; 0x1c6a <strtod+0x220>
    1c9a:	8a 2d       	mov	r24, r10
    1c9c:	88 0f       	add	r24, r24
    1c9e:	8b 2d       	mov	r24, r11
    1ca0:	88 1f       	adc	r24, r24
    1ca2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ca4:	49 f0       	breq	.+18     	; 0x1cb8 <strtod+0x26e>
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	30 e0       	ldi	r19, 0x00	; 0
    1caa:	a9 01       	movw	r20, r18
    1cac:	c5 01       	movw	r24, r10
    1cae:	b4 01       	movw	r22, r8
    1cb0:	0e 94 bd 0a 	call	0x157a	; 0x157a <__cmpsf2>
    1cb4:	81 11       	cpse	r24, r1
    1cb6:	06 c0       	rjmp	.+12     	; 0x1cc4 <strtod+0x27a>
    1cb8:	82 e2       	ldi	r24, 0x22	; 34
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <errno+0x1>
    1cc0:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <errno>
    1cc4:	c5 01       	movw	r24, r10
    1cc6:	b4 01       	movw	r22, r8
    1cc8:	09 c0       	rjmp	.+18     	; 0x1cdc <strtod+0x292>
    1cca:	60 e0       	ldi	r22, 0x00	; 0
    1ccc:	70 e0       	ldi	r23, 0x00	; 0
    1cce:	80 e8       	ldi	r24, 0x80	; 128
    1cd0:	9f ef       	ldi	r25, 0xFF	; 255
    1cd2:	04 c0       	rjmp	.+8      	; 0x1cdc <strtod+0x292>
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	70 e0       	ldi	r23, 0x00	; 0
    1cd8:	80 ec       	ldi	r24, 0xC0	; 192
    1cda:	9f e7       	ldi	r25, 0x7F	; 127
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	ec e0       	ldi	r30, 0x0C	; 12
    1ce2:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__epilogue_restores__+0xc>

00001ce6 <isspace>:
    1ce6:	91 11       	cpse	r25, r1
    1ce8:	0c 94 94 0e 	jmp	0x1d28	; 0x1d28 <__ctype_isfalse>
    1cec:	80 32       	cpi	r24, 0x20	; 32
    1cee:	19 f0       	breq	.+6      	; 0x1cf6 <isspace+0x10>
    1cf0:	89 50       	subi	r24, 0x09	; 9
    1cf2:	85 50       	subi	r24, 0x05	; 5
    1cf4:	c8 f7       	brcc	.-14     	; 0x1ce8 <isspace+0x2>
    1cf6:	08 95       	ret

00001cf8 <strncasecmp_P>:
    1cf8:	fb 01       	movw	r30, r22
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	41 50       	subi	r20, 0x01	; 1
    1cfe:	50 40       	sbci	r21, 0x00	; 0
    1d00:	88 f0       	brcs	.+34     	; 0x1d24 <strncasecmp_P+0x2c>
    1d02:	8d 91       	ld	r24, X+
    1d04:	81 34       	cpi	r24, 0x41	; 65
    1d06:	1c f0       	brlt	.+6      	; 0x1d0e <strncasecmp_P+0x16>
    1d08:	8b 35       	cpi	r24, 0x5B	; 91
    1d0a:	0c f4       	brge	.+2      	; 0x1d0e <strncasecmp_P+0x16>
    1d0c:	80 5e       	subi	r24, 0xE0	; 224
    1d0e:	65 91       	lpm	r22, Z+
    1d10:	61 34       	cpi	r22, 0x41	; 65
    1d12:	1c f0       	brlt	.+6      	; 0x1d1a <strncasecmp_P+0x22>
    1d14:	6b 35       	cpi	r22, 0x5B	; 91
    1d16:	0c f4       	brge	.+2      	; 0x1d1a <strncasecmp_P+0x22>
    1d18:	60 5e       	subi	r22, 0xE0	; 224
    1d1a:	86 1b       	sub	r24, r22
    1d1c:	61 11       	cpse	r22, r1
    1d1e:	71 f3       	breq	.-36     	; 0x1cfc <strncasecmp_P+0x4>
    1d20:	99 0b       	sbc	r25, r25
    1d22:	08 95       	ret
    1d24:	88 1b       	sub	r24, r24
    1d26:	fc cf       	rjmp	.-8      	; 0x1d20 <strncasecmp_P+0x28>

00001d28 <__ctype_isfalse>:
    1d28:	99 27       	eor	r25, r25
    1d2a:	88 27       	eor	r24, r24

00001d2c <__ctype_istrue>:
    1d2c:	08 95       	ret

00001d2e <__muluhisi3>:
    1d2e:	0e 94 ef 0c 	call	0x19de	; 0x19de <__umulhisi3>
    1d32:	a5 9f       	mul	r26, r21
    1d34:	90 0d       	add	r25, r0
    1d36:	b4 9f       	mul	r27, r20
    1d38:	90 0d       	add	r25, r0
    1d3a:	a4 9f       	mul	r26, r20
    1d3c:	80 0d       	add	r24, r0
    1d3e:	91 1d       	adc	r25, r1
    1d40:	11 24       	eor	r1, r1
    1d42:	08 95       	ret

00001d44 <__prologue_saves__>:
    1d44:	2f 92       	push	r2
    1d46:	3f 92       	push	r3
    1d48:	4f 92       	push	r4
    1d4a:	5f 92       	push	r5
    1d4c:	6f 92       	push	r6
    1d4e:	7f 92       	push	r7
    1d50:	8f 92       	push	r8
    1d52:	9f 92       	push	r9
    1d54:	af 92       	push	r10
    1d56:	bf 92       	push	r11
    1d58:	cf 92       	push	r12
    1d5a:	df 92       	push	r13
    1d5c:	ef 92       	push	r14
    1d5e:	ff 92       	push	r15
    1d60:	0f 93       	push	r16
    1d62:	1f 93       	push	r17
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	ca 1b       	sub	r28, r26
    1d6e:	db 0b       	sbc	r29, r27
    1d70:	0f b6       	in	r0, 0x3f	; 63
    1d72:	f8 94       	cli
    1d74:	de bf       	out	0x3e, r29	; 62
    1d76:	0f be       	out	0x3f, r0	; 63
    1d78:	cd bf       	out	0x3d, r28	; 61
    1d7a:	09 94       	ijmp

00001d7c <__epilogue_restores__>:
    1d7c:	2a 88       	ldd	r2, Y+18	; 0x12
    1d7e:	39 88       	ldd	r3, Y+17	; 0x11
    1d80:	48 88       	ldd	r4, Y+16	; 0x10
    1d82:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d84:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d86:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d88:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d8e:	b9 84       	ldd	r11, Y+9	; 0x09
    1d90:	c8 84       	ldd	r12, Y+8	; 0x08
    1d92:	df 80       	ldd	r13, Y+7	; 0x07
    1d94:	ee 80       	ldd	r14, Y+6	; 0x06
    1d96:	fd 80       	ldd	r15, Y+5	; 0x05
    1d98:	0c 81       	ldd	r16, Y+4	; 0x04
    1d9a:	1b 81       	ldd	r17, Y+3	; 0x03
    1d9c:	aa 81       	ldd	r26, Y+2	; 0x02
    1d9e:	b9 81       	ldd	r27, Y+1	; 0x01
    1da0:	ce 0f       	add	r28, r30
    1da2:	d1 1d       	adc	r29, r1
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	ed 01       	movw	r28, r26
    1db0:	08 95       	ret

00001db2 <_exit>:
    1db2:	f8 94       	cli

00001db4 <__stop_program>:
    1db4:	ff cf       	rjmp	.-2      	; 0x1db4 <__stop_program>
